"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const conversationModel_1 = require("./conversationModel");
const dynamodb = new AWS.DynamoDB();
async function addList(message, userId) {
    var _a;
    const { Item } = await dynamodb.getItem({
        TableName: process.env.TABLE_NAME,
        Key: {
            userId: {
                S: userId
            }
        },
    }).promise();
    const shoppingList = [{ S: message }];
    if (Item) {
        (_a = Item.shoppingList.L) === null || _a === void 0 ? void 0 : _a.map(value => shoppingList.push(value));
    }
    await dynamodb.putItem({
        TableName: process.env.TABLE_NAME,
        Item: {
            userId: {
                S: userId
            },
            shoppingList: {
                L: shoppingList
            }
        }
    }).promise();
    return [];
}
async function confirmList(userId) {
    var _a;
    const { Item } = await dynamodb.getItem({
        TableName: process.env.TABLE_NAME,
        Key: {
            userId: {
                S: userId
            }
        },
    }).promise();
    const shoppingList = [];
    if (Item) {
        (_a = Item.shoppingList.L) === null || _a === void 0 ? void 0 : _a.map(value => shoppingList.push(value.S));
    }
    return shoppingList;
}
async function clearList(userId) {
    await dynamodb.deleteItem({
        TableName: process.env.TABLE_NAME,
        Key: {
            userId: {
                S: userId
            }
        },
    }).promise();
    return [];
}
async function dbHandler(messageType, message, userId) {
    switch (messageType) {
        case conversationModel_1.MessageType.Add:
            return await addList(message, userId);
        case conversationModel_1.MessageType.Confirm:
            return await confirmList(userId);
        case conversationModel_1.MessageType.Clear:
            return await clearList(userId);
    }
}
exports.dbHandler = dbHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGJIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLDJEQUFpRDtBQUVqRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUVuQyxLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQWUsRUFBRSxNQUFjOztJQUNwRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ3RDLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVc7UUFDbEMsR0FBRyxFQUFFO1lBQ0gsTUFBTSxFQUFFO2dCQUNOLENBQUMsRUFBRSxNQUFNO2FBQ1Y7U0FDRjtLQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNaLE1BQU0sWUFBWSxHQUFrQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDcEUsSUFBSSxJQUFJLEVBQUU7UUFDUixNQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQywwQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFBLEVBQUUsQ0FBQSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDO0tBQzFEO0lBQ0QsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ3JCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVc7UUFDbEMsSUFBSSxFQUFFO1lBQ0osTUFBTSxFQUFFO2dCQUNOLENBQUMsRUFBRSxNQUFNO2FBQ1Y7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osQ0FBQyxFQUFFLFlBQVk7YUFDaEI7U0FDRjtLQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNaLE9BQU8sRUFBRSxDQUFBO0FBQ1gsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsTUFBYzs7SUFDdkMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUN0QyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRTtnQkFDTixDQUFDLEVBQUUsTUFBTTthQUNWO1NBQ0Y7S0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDWixNQUFNLFlBQVksR0FBYSxFQUFFLENBQUE7SUFDakMsSUFBSSxJQUFJLEVBQUU7UUFDUixNQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQywwQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFBLEVBQUUsQ0FBQSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFFLENBQUMsRUFBQztLQUM3RDtJQUNELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUM7QUFFRCxLQUFLLFVBQVUsU0FBUyxDQUFDLE1BQWM7SUFDckMsTUFBTSxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ3hCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVc7UUFDbEMsR0FBRyxFQUFFO1lBQ0gsTUFBTSxFQUFFO2dCQUNOLENBQUMsRUFBRSxNQUFNO2FBQ1Y7U0FDRjtLQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNaLE9BQU0sRUFBRSxDQUFBO0FBQ1YsQ0FBQztBQUVNLEtBQUssVUFBVSxTQUFTLENBQUMsV0FBd0IsRUFBRSxPQUFlLEVBQUUsTUFBYztJQUN2RixRQUFPLFdBQVcsRUFBRTtRQUNsQixLQUFLLCtCQUFXLENBQUMsR0FBRztZQUNsQixPQUFPLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN2QyxLQUFLLCtCQUFXLENBQUMsT0FBTztZQUN0QixPQUFPLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2xDLEtBQUssK0JBQVcsQ0FBQyxLQUFLO1lBQ3BCLE9BQU8sTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDakM7QUFDSCxDQUFDO0FBVEQsOEJBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkaydcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi9jb252ZXJzYXRpb25Nb2RlbCdcblxuY29uc3QgZHluYW1vZGIgPSBuZXcgQVdTLkR5bmFtb0RCKClcblxuYXN5bmMgZnVuY3Rpb24gYWRkTGlzdChtZXNzYWdlOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBjb25zdCB7IEl0ZW0gfSA9IGF3YWl0IGR5bmFtb2RiLmdldEl0ZW0oe1xuICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSEsXG4gICAgS2V5OiB7XG4gICAgICB1c2VySWQ6IHtcbiAgICAgICAgUzogdXNlcklkXG4gICAgICB9XG4gICAgfSxcbiAgfSkucHJvbWlzZSgpXG4gIGNvbnN0IHNob3BwaW5nTGlzdDogQVdTLkR5bmFtb0RCLkF0dHJpYnV0ZVZhbHVlW10gPSBbeyBTOiBtZXNzYWdlIH1dXG4gIGlmIChJdGVtKSB7XG4gICAgSXRlbS5zaG9wcGluZ0xpc3QuTD8ubWFwKHZhbHVlPT5zaG9wcGluZ0xpc3QucHVzaCh2YWx1ZSkpXG4gIH1cbiAgYXdhaXQgZHluYW1vZGIucHV0SXRlbSh7XG4gICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UQUJMRV9OQU1FISxcbiAgICBJdGVtOiB7XG4gICAgICB1c2VySWQ6IHtcbiAgICAgICAgUzogdXNlcklkXG4gICAgICB9LFxuICAgICAgc2hvcHBpbmdMaXN0OiB7XG4gICAgICAgIEw6IHNob3BwaW5nTGlzdFxuICAgICAgfVxuICAgIH1cbiAgfSkucHJvbWlzZSgpXG4gIHJldHVybiBbXVxufVxuXG5hc3luYyBmdW5jdGlvbiBjb25maXJtTGlzdCh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgY29uc3QgeyBJdGVtIH0gPSBhd2FpdCBkeW5hbW9kYi5nZXRJdGVtKHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUhLFxuICAgIEtleToge1xuICAgICAgdXNlcklkOiB7XG4gICAgICAgIFM6IHVzZXJJZFxuICAgICAgfVxuICAgIH0sXG4gIH0pLnByb21pc2UoKVxuICBjb25zdCBzaG9wcGluZ0xpc3Q6IHN0cmluZ1tdID0gW11cbiAgaWYgKEl0ZW0pIHtcbiAgICBJdGVtLnNob3BwaW5nTGlzdC5MPy5tYXAodmFsdWU9PnNob3BwaW5nTGlzdC5wdXNoKHZhbHVlLlMhKSlcbiAgfVxuICByZXR1cm4gc2hvcHBpbmdMaXN0XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyTGlzdCh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgYXdhaXQgZHluYW1vZGIuZGVsZXRlSXRlbSh7XG4gICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UQUJMRV9OQU1FISxcbiAgICBLZXk6IHtcbiAgICAgIHVzZXJJZDoge1xuICAgICAgICBTOiB1c2VySWRcbiAgICAgIH1cbiAgICB9LFxuICB9KS5wcm9taXNlKClcbiAgcmV0dXJuW11cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRiSGFuZGxlcihtZXNzYWdlVHlwZTogTWVzc2FnZVR5cGUsIG1lc3NhZ2U6IHN0cmluZywgdXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIHN3aXRjaChtZXNzYWdlVHlwZSkge1xuICAgIGNhc2UgTWVzc2FnZVR5cGUuQWRkOlxuICAgICAgcmV0dXJuIGF3YWl0IGFkZExpc3QobWVzc2FnZSwgdXNlcklkKVxuICAgIGNhc2UgTWVzc2FnZVR5cGUuQ29uZmlybTpcbiAgICAgIHJldHVybiBhd2FpdCBjb25maXJtTGlzdCh1c2VySWQpXG4gICAgY2FzZSBNZXNzYWdlVHlwZS5DbGVhcjpcbiAgICAgIHJldHVybiBhd2FpdCBjbGVhckxpc3QodXNlcklkKVxuICB9XG59Il19