"use strict";
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const lib_1 = require("../lib");
const util_1 = require("./util");
module.exports = {
    'addFileAsset correctly sets metadata and creates S3 parameters'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        stack.addFileAsset({
            fileName: 'file-name',
            packaging: lib_1.FileAssetPackaging.ZIP_DIRECTORY,
            sourceHash: 'source-hash'
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        test.ok(assetMetadata && assetMetadata.data);
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            test.equal(data.path, 'file-name');
            test.equal(data.id, 'source-hash');
            test.equal(data.packaging, lib_1.FileAssetPackaging.ZIP_DIRECTORY);
            test.equal(data.sourceHash, 'source-hash');
        }
        test.deepEqual(util_1.toCloudFormation(stack), {
            Parameters: {
                AssetParameterssourcehashS3BucketE6E91E3E: {
                    Type: 'String',
                    Description: 'S3 bucket for asset "source-hash"'
                },
                AssetParameterssourcehashS3VersionKeyAC4157C3: {
                    Type: 'String',
                    Description: 'S3 key for asset version "source-hash"'
                },
                AssetParameterssourcehashArtifactHashADBAE418: {
                    Type: 'String',
                    Description: 'Artifact hash for asset "source-hash"'
                }
            }
        });
        test.done();
    },
    'addDockerImageAsset correctly sets metadata'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        stack.addDockerImageAsset({
            sourceHash: 'source-hash',
            directoryName: 'directory-name',
            repositoryName: 'repository-name'
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        test.ok(assetMetadata && assetMetadata.data);
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            test.equal(data.packaging, 'container-image');
            test.equal(data.path, 'directory-name');
            test.equal(data.sourceHash, 'source-hash');
            test.equal(data.repositoryName, 'repository-name');
            test.equal(data.imageTag, 'source-hash');
        }
        test.deepEqual(util_1.toCloudFormation(stack), {});
        test.done();
    },
    'addDockerImageAsset uses the default repository name'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        stack.addDockerImageAsset({
            sourceHash: 'source-hash',
            directoryName: 'directory-name',
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        test.ok(assetMetadata && assetMetadata.data);
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            test.equal(data.packaging, 'container-image');
            test.equal(data.path, 'directory-name');
            test.equal(data.sourceHash, 'source-hash');
            test.equal(data.repositoryName, 'aws-cdk/assets');
            test.equal(data.imageTag, 'source-hash');
        }
        test.deepEqual(util_1.toCloudFormation(stack), {});
        test.done();
    },
    'addDockerImageAsset supports overriding repository name through a context key as a workaround until we have API for that'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        stack.node.setContext('assets-ecr-repository-name', 'my-custom-repo-name');
        // WHEN
        stack.addDockerImageAsset({
            sourceHash: 'source-hash',
            directoryName: 'directory-name',
        });
        // THEN
        const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);
        test.ok(assetMetadata && assetMetadata.data);
        if (assetMetadata && assetMetadata.data) {
            const data = assetMetadata.data;
            test.equal(data.packaging, 'container-image');
            test.equal(data.path, 'directory-name');
            test.equal(data.sourceHash, 'source-hash');
            test.equal(data.repositoryName, 'my-custom-repo-name');
            test.equal(data.imageTag, 'source-hash');
        }
        test.deepEqual(util_1.toCloudFormation(stack), {});
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,