"use strict";
const lib_1 = require("../lib");
function floatEqual(test, actual, expected) {
    test.ok(
    // Floats are subject to rounding errors up to Number.ESPILON
    actual >= expected - Number.EPSILON && actual <= expected + Number.EPSILON, `${actual} == ${expected}`);
}
module.exports = {
    'negative amount'(test) {
        test.throws(() => lib_1.Size.kibibytes(-1), /negative/);
        test.done();
    },
    'unresolved amount'(test) {
        const stack = new lib_1.Stack();
        const lazySize = lib_1.Size.kibibytes(lib_1.Token.asNumber({ resolve: () => 1337 }));
        test.equals(stack.resolve(lazySize.toKibibytes()), 1337);
        test.throws(() => stack.resolve(lazySize.toMebibytes()), /Unable to perform time unit conversion on un-resolved token/);
        test.done();
    },
    'Size in kibibytes'(test) {
        const size = lib_1.Size.kibibytes(4294967296);
        test.equal(size.toKibibytes(), 4294967296);
        test.equal(size.toMebibytes(), 4194304);
        test.equal(size.toGibibytes(), 4096);
        test.equal(size.toTebibytes(), 4);
        test.throws(() => size.toPebibytes(), /'4294967296 kibibytes' cannot be converted into a whole number/);
        floatEqual(test, size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 4294967296 / (1024 * 1024 * 1024 * 1024));
        test.equal(lib_1.Size.kibibytes(4 * 1024 * 1024).toGibibytes(), 4);
        test.done();
    },
    'Size in mebibytes'(test) {
        const size = lib_1.Size.mebibytes(4194304);
        test.equal(size.toKibibytes(), 4294967296);
        test.equal(size.toMebibytes(), 4194304);
        test.equal(size.toGibibytes(), 4096);
        test.equal(size.toTebibytes(), 4);
        test.throws(() => size.toPebibytes(), /'4194304 mebibytes' cannot be converted into a whole number/);
        floatEqual(test, size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 4194304 / (1024 * 1024 * 1024));
        test.equal(lib_1.Size.mebibytes(4 * 1024).toGibibytes(), 4);
        test.done();
    },
    'Size in gibibyte'(test) {
        const size = lib_1.Size.gibibytes(5);
        test.equal(size.toKibibytes(), 5242880);
        test.equal(size.toMebibytes(), 5120);
        test.equal(size.toGibibytes(), 5);
        test.throws(() => size.toTebibytes(), /'5 gibibytes' cannot be converted into a whole number/);
        floatEqual(test, size.toTebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5 / 1024);
        test.throws(() => size.toPebibytes(), /'5 gibibytes' cannot be converted into a whole number/);
        floatEqual(test, size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5 / (1024 * 1024));
        test.equal(lib_1.Size.gibibytes(4096).toTebibytes(), 4);
        test.done();
    },
    'Size in tebibyte'(test) {
        const size = lib_1.Size.tebibytes(5);
        test.equal(size.toKibibytes(), 5368709120);
        test.equal(size.toMebibytes(), 5242880);
        test.equal(size.toGibibytes(), 5120);
        test.equal(size.toTebibytes(), 5);
        test.throws(() => size.toPebibytes(), /'5 tebibytes' cannot be converted into a whole number/);
        floatEqual(test, size.toPebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5 / 1024);
        test.equal(lib_1.Size.tebibytes(4096).toPebibytes(), 4);
        test.done();
    },
    'Size in pebibyte'(test) {
        const size = lib_1.Size.pebibyte(5);
        test.equal(size.toKibibytes(), 5497558138880);
        test.equal(size.toMebibytes(), 5368709120);
        test.equal(size.toGibibytes(), 5242880);
        test.equal(size.toTebibytes(), 5120);
        test.equal(size.toPebibytes(), 5);
        test.done();
    },
    'rounding behavior'(test) {
        const size = lib_1.Size.mebibytes(5200);
        test.throws(() => size.toGibibytes(), /cannot be converted into a whole number/);
        test.throws(() => size.toGibibytes({ rounding: lib_1.SizeRoundingBehavior.FAIL }), /cannot be converted into a whole number/);
        test.equals(size.toGibibytes({ rounding: lib_1.SizeRoundingBehavior.FLOOR }), 5);
        test.equals(size.toTebibytes({ rounding: lib_1.SizeRoundingBehavior.FLOOR }), 0);
        floatEqual(test, size.toKibibytes({ rounding: lib_1.SizeRoundingBehavior.FLOOR }), 5324800);
        test.equals(size.toGibibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5.078125);
        test.equals(size.toTebibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5200 / (1024 * 1024));
        test.equals(size.toKibibytes({ rounding: lib_1.SizeRoundingBehavior.NONE }), 5324800);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,