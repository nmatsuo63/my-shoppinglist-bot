"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const core_1 = require("@aws-cdk/core");
const dns_validated_certificate_1 = require("../lib/dns-validated-certificate");
module.exports = {
    'creates CloudFormation Custom Resource'(test) {
        const stack = new core_1.Stack();
        const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
            zoneName: 'example.com'
        });
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            hostedZone: exampleDotComZone,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {
            DomainName: 'test.example.com',
            ServiceToken: {
                'Fn::GetAtt': [
                    'CertificateCertificateRequestorFunction5E845413',
                    'Arn'
                ]
            },
            HostedZoneId: {
                Ref: 'ExampleDotCom4D1B83AA',
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
            Handler: 'index.certificateRequestHandler',
            Runtime: 'nodejs10.x',
            Timeout: 900,
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyName: 'CertificateCertificateRequestorFunctionServiceRoleDefaultPolicy3C8845BC',
            Roles: [
                {
                    Ref: 'CertificateCertificateRequestorFunctionServiceRoleC04C13DA',
                }
            ],
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: [
                            'acm:RequestCertificate',
                            'acm:DescribeCertificate',
                            'acm:DeleteCertificate'
                        ],
                        Effect: 'Allow',
                        Resource: '*'
                    },
                    {
                        Action: 'route53:GetChange',
                        Effect: 'Allow',
                        Resource: '*'
                    },
                    {
                        Action: 'route53:changeResourceRecordSets',
                        Effect: 'Allow',
                        Resource: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':route53:::hostedzone/',
                                    { Ref: 'ExampleDotCom4D1B83AA' }
                                ]
                            ]
                        }
                    },
                ],
            }
        }));
        test.done();
    },
    'adds validation error on domain mismatch'(test) {
        const stack = new core_1.Stack();
        const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
            zoneName: 'hello.com'
        });
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'example.com',
            hostedZone: helloDotComZone,
        });
        test.throws(() => {
            assert_1.SynthUtils.synthesize(stack);
        }, /DNS zone hello.com is not authoritative for certificate domain name example.com/);
        test.done();
    },
    'does not try to validate unresolved tokens'(test) {
        const stack = new core_1.Stack();
        const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
            zoneName: core_1.Token.asString('hello.com')
        });
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'hello.com',
            hostedZone: helloDotComZone
        });
        test.doesNotThrow(() => {
            assert_1.SynthUtils.synthesize(stack);
        });
        test.done();
    },
    'test root certificate'(test) {
        const stack = new core_1.Stack();
        const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
            zoneName: 'example.com'
        });
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'example.com',
            hostedZone: exampleDotComZone,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {
            ServiceToken: {
                'Fn::GetAtt': [
                    'CertCertificateRequestorFunction98FDF273',
                    'Arn'
                ]
            },
            DomainName: 'example.com',
            HostedZoneId: {
                Ref: 'ExampleDotCom4D1B83AA'
            }
        }));
        test.done();
    },
    'works with imported zone'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack', {
            env: { account: '12345678', region: 'us-blue-5' },
        });
        const imported = aws_route53_1.HostedZone.fromLookup(stack, 'ExampleDotCom', {
            domainName: 'mydomain.com',
        });
        // WHEN
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'mydomain.com',
            hostedZone: imported,
            route53Endpoint: 'https://api.route53.xxx.com',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {
            ServiceToken: {
                'Fn::GetAtt': [
                    'CertCertificateRequestorFunction98FDF273',
                    'Arn'
                ]
            },
            DomainName: 'mydomain.com',
            HostedZoneId: 'DUMMY',
            Route53Endpoint: 'https://api.route53.xxx.com'
        }));
        test.done();
    },
    'works with imported role'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Stack', {
            env: { account: '12345678', region: 'us-blue-5' },
        });
        const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
            zoneName: 'hello.com'
        });
        const role = iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::account-id:role/role-name');
        // WHEN
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'hello.com',
            hostedZone: helloDotComZone,
            customResourceRole: role
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
            Role: 'arn:aws:iam::account-id:role/role-name'
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,