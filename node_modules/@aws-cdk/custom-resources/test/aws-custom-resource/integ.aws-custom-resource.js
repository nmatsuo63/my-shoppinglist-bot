#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sns = require("@aws-cdk/aws-sns");
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-sdk-js');
const topic = new sns.Topic(stack, 'Topic');
const snsPublish = new lib_1.AwsCustomResource(stack, 'Publish', {
    resourceType: 'Custom::SNSPublisher',
    onUpdate: {
        service: 'SNS',
        action: 'publish',
        parameters: {
            Message: 'hello',
            TopicArn: topic.topicArn
        },
        physicalResourceId: lib_1.PhysicalResourceId.of(topic.topicArn),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE })
});
const listTopics = new lib_1.AwsCustomResource(stack, 'ListTopics', {
    onUpdate: {
        service: 'SNS',
        action: 'listTopics',
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Topics.0.TopicArn')
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE })
});
listTopics.node.addDependency(topic);
const ssmParameter = new ssm.StringParameter(stack, 'DummyParameter', {
    stringValue: '1337',
});
const getParameter = new lib_1.AwsCustomResource(stack, 'GetParameter', {
    resourceType: 'Custom::SSMParameter',
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true
        },
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Parameter.ARN')
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE })
});
new cdk.CfnOutput(stack, 'MessageId', { value: snsPublish.getResponseField('MessageId') });
new cdk.CfnOutput(stack, 'TopicArn', { value: listTopics.getResponseField('Topics.0.TopicArn') });
new cdk.CfnOutput(stack, 'ParameterValue', { value: getParameter.getResponseField('Parameter.Value') });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXdzLWN1c3RvbS1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmF3cy1jdXN0b20tcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsbUNBQTJGO0FBRTNGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUVuRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRTVDLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtJQUN6RCxZQUFZLEVBQUUsc0JBQXNCO0lBQ3BDLFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxLQUFLO1FBQ2QsTUFBTSxFQUFFLFNBQVM7UUFDakIsVUFBVSxFQUFFO1lBQ1YsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQ3pCO1FBQ0Qsa0JBQWtCLEVBQUUsd0JBQWtCLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7S0FDMUQ7SUFDRCxNQUFNLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxDQUFDLEVBQUMsU0FBUyxFQUFFLDZCQUF1QixDQUFDLFlBQVksRUFBQyxDQUFDO0NBQ2hHLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUM1RCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLGtCQUFrQixFQUFFLHdCQUFrQixDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQztLQUN6RTtJQUNELE1BQU0sRUFBRSw2QkFBdUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxTQUFTLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxFQUFDLENBQUM7Q0FDaEcsQ0FBQyxDQUFDO0FBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFckMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUNwRSxXQUFXLEVBQUUsTUFBTTtDQUNwQixDQUFDLENBQUM7QUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDaEUsWUFBWSxFQUFFLHNCQUFzQjtJQUNwQyxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxjQUFjO1FBQ3RCLFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxZQUFZLENBQUMsYUFBYTtZQUNoQyxjQUFjLEVBQUUsSUFBSTtTQUNyQjtRQUNELGtCQUFrQixFQUFFLHdCQUFrQixDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7S0FDckU7SUFDRCxNQUFNLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxDQUFDLEVBQUMsU0FBUyxFQUFFLDZCQUF1QixDQUFDLFlBQVksRUFBQyxDQUFDO0NBQ2hHLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0YsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAqIGFzIHNucyBmcm9tICdAYXdzLWNkay9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHNzbSBmcm9tICdAYXdzLWNkay9hd3Mtc3NtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEF3c0N1c3RvbVJlc291cmNlLCBBd3NDdXN0b21SZXNvdXJjZVBvbGljeSwgUGh5c2ljYWxSZXNvdXJjZUlkIH0gZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstc2RrLWpzJyk7XG5cbmNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ1RvcGljJyk7XG5cbmNvbnN0IHNuc1B1Ymxpc2ggPSBuZXcgQXdzQ3VzdG9tUmVzb3VyY2Uoc3RhY2ssICdQdWJsaXNoJywge1xuICByZXNvdXJjZVR5cGU6ICdDdXN0b206OlNOU1B1Ymxpc2hlcicsXG4gIG9uVXBkYXRlOiB7XG4gICAgc2VydmljZTogJ1NOUycsXG4gICAgYWN0aW9uOiAncHVibGlzaCcsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTWVzc2FnZTogJ2hlbGxvJyxcbiAgICAgIFRvcGljQXJuOiB0b3BpYy50b3BpY0FyblxuICAgIH0sXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkOiBQaHlzaWNhbFJlc291cmNlSWQub2YodG9waWMudG9waWNBcm4pLFxuICB9LFxuICBwb2xpY3k6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LmZyb21TZGtDYWxscyh7cmVzb3VyY2VzOiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5BTllfUkVTT1VSQ0V9KVxufSk7XG5cbmNvbnN0IGxpc3RUb3BpY3MgPSBuZXcgQXdzQ3VzdG9tUmVzb3VyY2Uoc3RhY2ssICdMaXN0VG9waWNzJywge1xuICBvblVwZGF0ZToge1xuICAgIHNlcnZpY2U6ICdTTlMnLFxuICAgIGFjdGlvbjogJ2xpc3RUb3BpY3MnLFxuICAgIHBoeXNpY2FsUmVzb3VyY2VJZDogUGh5c2ljYWxSZXNvdXJjZUlkLmZyb21SZXNwb25zZSgnVG9waWNzLjAuVG9waWNBcm4nKVxuICB9LFxuICBwb2xpY3k6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LmZyb21TZGtDYWxscyh7cmVzb3VyY2VzOiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5BTllfUkVTT1VSQ0V9KVxufSk7XG5saXN0VG9waWNzLm5vZGUuYWRkRGVwZW5kZW5jeSh0b3BpYyk7XG5cbmNvbnN0IHNzbVBhcmFtZXRlciA9IG5ldyBzc20uU3RyaW5nUGFyYW1ldGVyKHN0YWNrLCAnRHVtbXlQYXJhbWV0ZXInLCB7XG4gIHN0cmluZ1ZhbHVlOiAnMTMzNycsXG59KTtcbmNvbnN0IGdldFBhcmFtZXRlciA9IG5ldyBBd3NDdXN0b21SZXNvdXJjZShzdGFjaywgJ0dldFBhcmFtZXRlcicsIHtcbiAgcmVzb3VyY2VUeXBlOiAnQ3VzdG9tOjpTU01QYXJhbWV0ZXInLFxuICBvblVwZGF0ZToge1xuICAgIHNlcnZpY2U6ICdTU00nLFxuICAgIGFjdGlvbjogJ2dldFBhcmFtZXRlcicsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTmFtZTogc3NtUGFyYW1ldGVyLnBhcmFtZXRlck5hbWUsXG4gICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZVxuICAgIH0sXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkOiBQaHlzaWNhbFJlc291cmNlSWQuZnJvbVJlc3BvbnNlKCdQYXJhbWV0ZXIuQVJOJylcbiAgfSxcbiAgcG9saWN5OiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoe3Jlc291cmNlczogQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3kuQU5ZX1JFU09VUkNFfSlcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ01lc3NhZ2VJZCcsIHsgdmFsdWU6IHNuc1B1Ymxpc2guZ2V0UmVzcG9uc2VGaWVsZCgnTWVzc2FnZUlkJykgfSk7XG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1RvcGljQXJuJywgeyB2YWx1ZTogbGlzdFRvcGljcy5nZXRSZXNwb25zZUZpZWxkKCdUb3BpY3MuMC5Ub3BpY0FybicpIH0pO1xubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdQYXJhbWV0ZXJWYWx1ZScsIHsgdmFsdWU6IGdldFBhcmFtZXRlci5nZXRSZXNwb25zZUZpZWxkKCdQYXJhbWV0ZXIuVmFsdWUnKSB9KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=