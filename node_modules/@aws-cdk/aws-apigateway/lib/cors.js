"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class Cors {
    // utility class
    constructor() { }
}
exports.Cors = Cors;
/**
 * All HTTP methods.
 */
Cors.ALL_METHODS = util_1.ALL_METHODS;
/**
 * All origins.
 */
Cors.ALL_ORIGINS = ['*'];
/**
 * The set of default headers allowed for CORS and useful for API Gateway.
 */
Cors.DEFAULT_HEADERS = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpQ0FBcUM7QUFnR3JDLE1BQWEsSUFBSTtJQWdCZixnQkFBZ0I7SUFDaEIsZ0JBQXdCLENBQUM7O0FBakIzQixvQkFrQkM7QUFqQkM7O0dBRUc7QUFDb0IsZ0JBQVcsR0FBRyxrQkFBVyxDQUFDO0FBRWpEOztHQUVHO0FBQ29CLGdCQUFXLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztBQUU3Qzs7R0FFRztBQUNvQixvQkFBZSxHQUFHLENBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixFQUFFLGtCQUFrQixDQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQUxMX01FVEhPRFMgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvcnNPcHRpb25zIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgcmV0dXJuZWQgZnJvbSB0aGUgT1BUSU9OUyBtZXRob2QuXG4gICAqXG4gICAqIEBkZWZhdWx0IDIwNFxuICAgKi9cbiAgcmVhZG9ubHkgc3RhdHVzQ29kZT86IG51bWJlcjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBsaXN0IG9mIG9yaWdpbnMgdGhhdCBhcmUgYWxsb3dlZCB0byBtYWtlIHJlcXVlc3RzIHRvIHRoaXNcbiAgICogcmVzb3VyY2UuIElmIHlvdSB3aXNoIHRvIGFsbG93IGFsbCBvcmlnaW5zLCBzcGVjaWZ5IGBDb3JzLkFMTF9PUklHSU5TYCBvclxuICAgKiBgWyAqIF1gLlxuICAgKlxuICAgKiBSZXNwb25zZXMgd2lsbCBpbmNsdWRlIHRoZSBgQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luYCByZXNwb25zZSBoZWFkZXIuXG4gICAqIElmIGBDb3JzLkFMTF9PUklHSU5TYCBpcyBzcGVjaWZpZWQsIHRoZSBgVmFyeTogT3JpZ2luYCByZXNwb25zZSBoZWFkZXIgd2lsbFxuICAgKiBhbHNvIGJlIGluY2x1ZGVkLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cbiAgICovXG4gIHJlYWRvbmx5IGFsbG93T3JpZ2luczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzIHJlc3BvbnNlIGhlYWRlciBpcyB1c2VkIGluIHJlc3BvbnNlIHRvIGFcbiAgICogcHJlZmxpZ2h0IHJlcXVlc3Qgd2hpY2ggaW5jbHVkZXMgdGhlIEFjY2Vzcy1Db250cm9sLVJlcXVlc3QtSGVhZGVycyB0b1xuICAgKiBpbmRpY2F0ZSB3aGljaCBIVFRQIGhlYWRlcnMgY2FuIGJlIHVzZWQgZHVyaW5nIHRoZSBhY3R1YWwgcmVxdWVzdC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1xuICAgKiBAZGVmYXVsdCBDb3JzLkRFRkFVTFRfSEVBREVSU1xuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dIZWFkZXJzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzIHJlc3BvbnNlIGhlYWRlciBzcGVjaWZpZXMgdGhlIG1ldGhvZCBvclxuICAgKiBtZXRob2RzIGFsbG93ZWQgd2hlbiBhY2Nlc3NpbmcgdGhlIHJlc291cmNlIGluIHJlc3BvbnNlIHRvIGEgcHJlZmxpZ2h0IHJlcXVlc3QuXG4gICAqXG4gICAqIElmIGBBTllgIGlzIHNwZWNpZmllZCwgaXQgd2lsbCBiZSBleHBhbmRlZCB0byBgQ29ycy5BTExfTUVUSE9EU2AuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcbiAgICogQGRlZmF1bHQgQ29ycy5BTExfTUVUSE9EU1xuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dNZXRob2RzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyByZXNwb25zZSBoZWFkZXIgdGVsbHMgYnJvd3NlcnMgd2hldGhlclxuICAgKiB0byBleHBvc2UgdGhlIHJlc3BvbnNlIHRvIGZyb250ZW5kIEphdmFTY3JpcHQgY29kZSB3aGVuIHRoZSByZXF1ZXN0J3NcbiAgICogY3JlZGVudGlhbHMgbW9kZSAoUmVxdWVzdC5jcmVkZW50aWFscykgaXMgXCJpbmNsdWRlXCIuXG4gICAqXG4gICAqIFdoZW4gYSByZXF1ZXN0J3MgY3JlZGVudGlhbHMgbW9kZSAoUmVxdWVzdC5jcmVkZW50aWFscykgaXMgXCJpbmNsdWRlXCIsXG4gICAqIGJyb3dzZXJzIHdpbGwgb25seSBleHBvc2UgdGhlIHJlc3BvbnNlIHRvIGZyb250ZW5kIEphdmFTY3JpcHQgY29kZSBpZiB0aGVcbiAgICogQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMgdmFsdWUgaXMgdHJ1ZS5cbiAgICpcbiAgICogQ3JlZGVudGlhbHMgYXJlIGNvb2tpZXMsIGF1dGhvcml6YXRpb24gaGVhZGVycyBvciBUTFMgY2xpZW50IGNlcnRpZmljYXRlcy5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHNcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGFsbG93Q3JlZGVudGlhbHM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgQWNjZXNzLUNvbnRyb2wtTWF4LUFnZSByZXNwb25zZSBoZWFkZXIgaW5kaWNhdGVzIGhvdyBsb25nIHRoZSByZXN1bHRzIG9mXG4gICAqIGEgcHJlZmxpZ2h0IHJlcXVlc3QgKHRoYXQgaXMgdGhlIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBpbiB0aGVcbiAgICogQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyBhbmQgQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyBoZWFkZXJzKVxuICAgKiBjYW4gYmUgY2FjaGVkLlxuICAgKlxuICAgKiBUbyBkaXNhYmxlIGNhY2hpbmcgYWx0b2d0aGVyIHVzZSBgZGlzYWJsZUNhY2hlOiB0cnVlYC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtTWF4LUFnZVxuICAgKiBAZGVmYXVsdCAtIGJyb3dzZXItc3BlY2lmaWMgKHNlZSByZWZlcmVuY2UpXG4gICAqL1xuICByZWFkb25seSBtYXhBZ2U/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogU2V0cyBBY2Nlc3MtQ29udHJvbC1NYXgtQWdlIHRvIC0xLCB3aGljaCBtZWFucyB0aGF0IGNhY2hpbmcgaXMgZGlzYWJsZWQuXG4gICAqIFRoaXMgb3B0aW9uIGNhbm5vdCBiZSB1c2VkIHdpdGggYG1heEFnZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gY2FjaGUgaXMgZW5hYmxlZFxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZUNhY2hlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzIHJlc3BvbnNlIGhlYWRlciBpbmRpY2F0ZXMgd2hpY2ggaGVhZGVyc1xuICAgKiBjYW4gYmUgZXhwb3NlZCBhcyBwYXJ0IG9mIHRoZSByZXNwb25zZSBieSBsaXN0aW5nIHRoZWlyIG5hbWVzLlxuICAgKlxuICAgKiBJZiB5b3Ugd2FudCBjbGllbnRzIHRvIGJlIGFibGUgdG8gYWNjZXNzIG90aGVyIGhlYWRlcnMsIHlvdSBoYXZlIHRvIGxpc3RcbiAgICogdGhlbSB1c2luZyB0aGUgQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnMgaGVhZGVyLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVyc1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIG9ubHkgdGhlIDYgQ09SUy1zYWZlbGlzdGVkIHJlc3BvbnNlIGhlYWRlcnMgYXJlIGV4cG9zZWQ6XG4gICAqIENhY2hlLUNvbnRyb2wsIENvbnRlbnQtTGFuZ3VhZ2UsIENvbnRlbnQtVHlwZSwgRXhwaXJlcywgTGFzdC1Nb2RpZmllZCxcbiAgICogUHJhZ21hXG4gICAqL1xuICByZWFkb25seSBleHBvc2VIZWFkZXJzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBDb3JzIHtcbiAgLyoqXG4gICAqIEFsbCBIVFRQIG1ldGhvZHMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFMTF9NRVRIT0RTID0gQUxMX01FVEhPRFM7XG5cbiAgLyoqXG4gICAqIEFsbCBvcmlnaW5zLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTExfT1JJR0lOUyA9IFsgJyonIF07XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgZGVmYXVsdCBoZWFkZXJzIGFsbG93ZWQgZm9yIENPUlMgYW5kIHVzZWZ1bCBmb3IgQVBJIEdhdGV3YXkuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfSEVBREVSUyA9IFsgJ0NvbnRlbnQtVHlwZScsICdYLUFtei1EYXRlJywgJ0F1dGhvcml6YXRpb24nLCAnWC1BcGktS2V5JywgJ1gtQW16LVNlY3VyaXR5LVRva2VuJywgJ1gtQW16LVVzZXItQWdlbnQnIF07XG5cbiAgLy8gdXRpbGl0eSBjbGFzc1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyB9XG59XG4iXX0=