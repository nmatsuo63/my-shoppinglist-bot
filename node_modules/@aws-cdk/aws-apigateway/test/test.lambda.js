"use strict";
const assert_1 = require("@aws-cdk/assert");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
const apigateway = require("../lib");
module.exports = {
    'minimal setup'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'my-api');
        const handler = new lambda.Function(stack, 'Handler', {
            runtime: lambda.Runtime.PYTHON_2_7,
            handler: 'boom',
            code: lambda.Code.fromInline('foo')
        });
        // WHEN
        const integ = new apigateway.LambdaIntegration(handler);
        api.root.addMethod('GET', integ);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            Integration: {
                IntegrationHttpMethod: 'POST',
                Type: 'AWS_PROXY',
                Uri: {
                    'Fn::Join': [
                        '',
                        [
                            'arn:',
                            {
                                Ref: 'AWS::Partition'
                            },
                            ':apigateway:',
                            {
                                Ref: 'AWS::Region'
                            },
                            ':lambda:path/2015-03-31/functions/',
                            {
                                'Fn::GetAtt': [
                                    'Handler886CB40B',
                                    'Arn'
                                ]
                            },
                            '/invocations'
                        ]
                    ]
                }
            }
        }));
        test.done();
    },
    '"allowTestInvoke" can be used to disallow calling the API from the test UI'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'Handler', {
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler'
        });
        const api = new apigateway.RestApi(stack, 'api');
        // WHEN
        const integ = new apigateway.LambdaIntegration(fn, { allowTestInvoke: false });
        api.root.addMethod('GET', integ);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Permission', {
            SourceArn: {
                'Fn::Join': [
                    '',
                    [
                        'arn:', { Ref: 'AWS::Partition' }, ':execute-api:', { Ref: 'AWS::Region' }, ':', { Ref: 'AWS::AccountId' }, ':',
                        { Ref: 'apiC8550315' }, '/', { Ref: 'apiDeploymentStageprod896C8101' }, '/GET/'
                    ]
                ]
            }
        }));
        assert_1.expect(stack).to(assert_1.not(assert_1.haveResource('AWS::Lambda::Permission', {
            SourceArn: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        { Ref: 'AWS::Partition' },
                        ':execute-api:',
                        { Ref: 'AWS::Region' },
                        ':',
                        { Ref: 'AWS::AccountId' },
                        ':',
                        { Ref: 'apiC8550315' },
                        '/test-invoke-stage/GET/'
                    ]
                ]
            }
        })));
        test.done();
    },
    '"proxy" can be used to disable proxy mode'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'Handler', {
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
            handler: 'index.handler'
        });
        const api = new apigateway.RestApi(stack, 'api');
        // WHEN
        const integ = new apigateway.LambdaIntegration(fn, { proxy: false });
        api.root.addMethod('GET', integ);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ApiGateway::Method', {
            Integration: {
                Type: 'AWS'
            }
        }));
        test.done();
    },
    'when "ANY" is used, lambda permission will include "*" for method'(test) {
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'test-api');
        const handler = new lambda.Function(stack, 'MyFunc', {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: 'index.handler',
            code: lambda.Code.fromInline('loo')
        });
        const target = new apigateway.LambdaIntegration(handler);
        api.root.addMethod('ANY', target);
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Permission', {
            SourceArn: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        { Ref: 'AWS::Partition' },
                        ':execute-api:',
                        { Ref: 'AWS::Region' },
                        ':',
                        { Ref: 'AWS::AccountId' },
                        ':',
                        { Ref: 'testapiD6451F70' },
                        '/test-invoke-stage/*/'
                    ]
                ]
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Permission', {
            SourceArn: {
                'Fn::Join': [
                    '',
                    [
                        'arn:',
                        {
                            Ref: 'AWS::Partition'
                        },
                        ':execute-api:',
                        {
                            Ref: 'AWS::Region'
                        },
                        ':',
                        {
                            Ref: 'AWS::AccountId'
                        },
                        ':',
                        {
                            Ref: 'testapiD6451F70'
                        },
                        '/',
                        { Ref: 'testapiDeploymentStageprod5C9E92A4' },
                        '/*/'
                    ]
                ]
            }
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,