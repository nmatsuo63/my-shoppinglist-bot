"use strict";
const assert_1 = require("@aws-cdk/assert");
const s3_assets = require("@aws-cdk/aws-s3-assets");
const sns = require("@aws-cdk/aws-sns");
const core_1 = require("@aws-cdk/core");
const fs = require("fs");
const path = require("path");
const nested_stack_1 = require("../lib/nested-stack");
module.exports = {
    'fails if defined as a root'(test) {
        // THEN
        test.throws(() => new nested_stack_1.NestedStack(undefined, 'boom'), /Nested stacks cannot be defined as a root construct/);
        test.done();
    },
    'fails if defined without a parent stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const group = new core_1.Construct(app, 'group');
        // THEN
        test.throws(() => new nested_stack_1.NestedStack(app, 'boom'), /must be defined within scope of another non-nested stack/);
        test.throws(() => new nested_stack_1.NestedStack(group, 'bam'), /must be defined within scope of another non-nested stack/);
        test.done();
    },
    'can be defined as a direct child or an indirect child of a Stack'(test) {
        // GIVEN
        const parent = new core_1.Stack();
        // THEN
        new nested_stack_1.NestedStack(parent, 'direct');
        new nested_stack_1.NestedStack(new core_1.Construct(parent, 'group'), 'indirect');
        test.done();
    },
    'nested stack is not synthesized as a stack artifact into the assembly'(test) {
        // GIVEN
        const app = new core_1.App();
        const parentStack = new core_1.Stack(app, 'parent-stack');
        new nested_stack_1.NestedStack(parentStack, 'nested-stack');
        // WHEN
        const assembly = app.synth();
        // THEN
        test.deepEqual(assembly.artifacts.length, 2);
        test.done();
    },
    'the template of the nested stack is synthesized into the cloud assembly'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'parent-stack');
        const nested = new nested_stack_1.NestedStack(parent, 'nested-stack');
        new core_1.CfnResource(nested, 'ResourceInNestedStack', { type: 'AWS::Resource::Nested' });
        // WHEN
        const assembly = app.synth();
        // THEN
        const template = JSON.parse(fs.readFileSync(path.join(assembly.directory, `${nested.node.uniqueId}.nested.template.json`), 'utf-8'));
        test.deepEqual(template, {
            Resources: {
                ResourceInNestedStack: {
                    Type: 'AWS::Resource::Nested'
                }
            }
        });
        test.done();
    },
    'file asset metadata is associated with the parent stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'parent-stack');
        const nested = new nested_stack_1.NestedStack(parent, 'nested-stack');
        new core_1.CfnResource(nested, 'ResourceInNestedStack', { type: 'AWS::Resource::Nested' });
        // WHEN
        const assembly = app.synth();
        // THEN
        test.deepEqual(assembly.getStackByName(parent.stackName).assets, [{
                path: 'parentstacknestedstack844892C0.nested.template.json',
                id: 'c639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096',
                packaging: 'file',
                sourceHash: 'c639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096',
                s3BucketParameter: 'AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3BucketDA8C3345',
                s3KeyParameter: 'AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3VersionKey09D03EE6',
                artifactHashParameter: 'AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096ArtifactHash8DE450C7'
            }]);
        test.done();
    },
    'aws::cloudformation::stack is synthesized in the parent scope'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'parent-stack');
        // WHEN
        const nested = new nested_stack_1.NestedStack(parent, 'nested-stack');
        new core_1.CfnResource(nested, 'ResourceInNestedStack', { type: 'AWS::Resource::Nested' });
        // THEN
        const assembly = app.synth();
        // assembly has one stack (the parent)
        test.deepEqual(assembly.stacks.length, 1);
        // but this stack has an asset that points to the synthesized template
        test.deepEqual(assembly.stacks[0].assets[0].path, 'parentstacknestedstack844892C0.nested.template.json');
        // the template includes our resource
        const filePath = path.join(assembly.directory, assembly.stacks[0].assets[0].path);
        test.deepEqual(JSON.parse(fs.readFileSync(filePath).toString('utf-8')), {
            Resources: { ResourceInNestedStack: { Type: 'AWS::Resource::Nested' } }
        });
        // the parent template includes the parameters and the nested stack resource which points to the s3 url
        assert_1.expect(parent).toMatch({
            Resources: {
                nestedstackNestedStacknestedstackNestedStackResource71CDD241: {
                    Type: 'AWS::CloudFormation::Stack',
                    Properties: {
                        TemplateURL: {
                            'Fn::Join': [
                                '',
                                [
                                    'https://s3.',
                                    {
                                        Ref: 'AWS::Region'
                                    },
                                    '.',
                                    {
                                        Ref: 'AWS::URLSuffix'
                                    },
                                    '/',
                                    {
                                        Ref: 'AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3BucketDA8C3345'
                                    },
                                    '/',
                                    {
                                        'Fn::Select': [
                                            0,
                                            {
                                                'Fn::Split': [
                                                    '||',
                                                    {
                                                        Ref: 'AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3VersionKey09D03EE6'
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        'Fn::Select': [
                                            1,
                                            {
                                                'Fn::Split': [
                                                    '||',
                                                    {
                                                        Ref: 'AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3VersionKey09D03EE6'
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            },
            Parameters: {
                AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3BucketDA8C3345: {
                    Type: 'String',
                    Description: 'S3 bucket for asset "c639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096"'
                },
                AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096S3VersionKey09D03EE6: {
                    Type: 'String',
                    Description: 'S3 key for asset version "c639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096"'
                },
                AssetParametersc639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096ArtifactHash8DE450C7: {
                    Type: 'String',
                    Description: 'Artifact hash for asset "c639c0a5e7320758aa22589669ecebc98f185b711300b074f53998c8f9a45096"'
                }
            }
        });
        test.done();
    },
    'Stack.of()'(test) {
        class MyNestedStack extends nested_stack_1.NestedStack {
            constructor(scope, id) {
                super(scope, id);
                const param = new core_1.CfnParameter(this, 'param', { type: 'String' });
                this.stackOfChild = core_1.Stack.of(param);
            }
        }
        const parent = new core_1.Stack();
        const nested = new MyNestedStack(parent, 'nested');
        test.ok(nested.stackOfChild === nested);
        test.ok(core_1.Stack.of(nested) === nested);
        test.done();
    },
    'references within the nested stack are not reported as cross stack references'(test) {
        class MyNestedStack extends nested_stack_1.NestedStack {
            constructor(scope, id) {
                super(scope, id);
                const param = new core_1.CfnParameter(this, 'param', { type: 'String' });
                new core_1.CfnResource(this, 'resource', {
                    type: 'My::Resource',
                    properties: {
                        SomeProp: param.valueAsString
                    }
                });
            }
        }
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'parent');
        new MyNestedStack(parent, 'nested');
        // references are added during "prepare"
        const assembly = app.synth();
        test.deepEqual(assembly.stacks.length, 1);
        test.deepEqual(assembly.stacks[0].dependencies, []);
        test.done();
    },
    'references to a resource from the parent stack in a nested stack is translated into a cfn parameter'(test) {
        // WHEN
        class MyNestedStack extends nested_stack_1.NestedStack {
            constructor(scope, id, resourceFromParent) {
                super(scope, id);
                new core_1.CfnResource(this, 'resource', {
                    type: 'AWS::Child::Resource',
                    properties: {
                        ReferenceToResourceInParentStack: resourceFromParent.ref
                    }
                });
                new core_1.CfnResource(this, 'resource2', {
                    type: 'My::Resource::2',
                    properties: {
                        Prop1: resourceFromParent.getAtt('Attr'),
                        Prop2: resourceFromParent.ref,
                    }
                });
            }
        }
        const app = new core_1.App();
        const parentStack = new core_1.Stack(app, 'parent');
        const resource = new core_1.CfnResource(parentStack, 'parent-resource', { type: 'AWS::Parent::Resource' });
        const nested = new MyNestedStack(parentStack, 'nested', resource);
        // THEN
        app.synth();
        // nested template should use a parameter to reference the resource from the parent stack
        assert_1.expect(nested).toMatch({
            Resources: {
                resource: {
                    Type: 'AWS::Child::Resource',
                    Properties: { ReferenceToResourceInParentStack: { Ref: 'referencetoparentparentresourceD56EA8F7Ref' } }
                },
                resource2: {
                    Type: 'My::Resource::2',
                    Properties: {
                        Prop1: { Ref: 'referencetoparentparentresourceD56EA8F7Attr' },
                        Prop2: { Ref: 'referencetoparentparentresourceD56EA8F7Ref' }
                    }
                }
            },
            Parameters: {
                referencetoparentparentresourceD56EA8F7Ref: { Type: 'String' },
                referencetoparentparentresourceD56EA8F7Attr: { Type: 'String' }
            }
        });
        // parent template should pass in the value through the parameter
        assert_1.expect(parentStack).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                referencetoparentparentresourceD56EA8F7Ref: {
                    Ref: 'parentresource'
                },
                referencetoparentparentresourceD56EA8F7Attr: {
                    'Fn::GetAtt': [
                        'parentresource',
                        'Attr'
                    ]
                }
            },
        }));
        test.done();
    },
    'references to a resource in the nested stack in the parent is translated into a cfn output'(test) {
        class MyNestedStack extends nested_stack_1.NestedStack {
            constructor(scope, id) {
                super(scope, id);
                this.resourceFromChild = new core_1.CfnResource(this, 'resource', {
                    type: 'AWS::Child::Resource',
                });
            }
        }
        const app = new core_1.App();
        const parentStack = new core_1.Stack(app, 'parent');
        const nested = new MyNestedStack(parentStack, 'nested');
        new core_1.CfnResource(parentStack, 'another-parent-resource', {
            type: 'AWS::Parent::Resource',
            properties: {
                RefToResourceInNestedStack: nested.resourceFromChild.ref
            }
        });
        // references are added during "prepare"
        app.synth();
        // nested template should use a parameter to reference the resource from the parent stack
        assert_1.expect(nested).toMatch({
            Resources: {
                resource: { Type: 'AWS::Child::Resource' }
            },
            Outputs: {
                parentnestedresource4D680677Ref: { Value: { Ref: 'resource' } }
            }
        });
        // parent template should pass in the value through the parameter
        assert_1.expect(parentStack).to(assert_1.haveResource('AWS::Parent::Resource', {
            RefToResourceInNestedStack: {
                'Fn::GetAtt': [
                    'nestedNestedStacknestedNestedStackResource3DD143BF',
                    'Outputs.parentnestedresource4D680677Ref'
                ]
            }
        }));
        test.done();
    },
    'nested stack references a resource from another non-nested stack (not the parent)'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack1 = new core_1.Stack(app, 'Stack1');
        const stack2 = new core_1.Stack(app, 'Stack2');
        const nestedUnderStack1 = new nested_stack_1.NestedStack(stack1, 'NestedUnderStack1');
        const resourceInStack2 = new core_1.CfnResource(stack2, 'ResourceInStack2', { type: 'MyResource' });
        // WHEN
        new core_1.CfnResource(nestedUnderStack1, 'ResourceInNestedStack1', {
            type: 'Nested::Resource',
            properties: {
                RefToSibling: resourceInStack2.getAtt('MyAttribute')
            }
        });
        // THEN
        const assembly = app.synth();
        // producing stack should have an export
        assert_1.expect(stack2).toMatch({
            Resources: {
                ResourceInStack2: { Type: 'MyResource' }
            },
            Outputs: {
                ExportsOutputFnGetAttResourceInStack2MyAttributeC15F1009: {
                    Value: { 'Fn::GetAtt': ['ResourceInStack2', 'MyAttribute'] },
                    Export: { Name: 'Stack2:ExportsOutputFnGetAttResourceInStack2MyAttributeC15F1009' }
                }
            }
        });
        // nested stack uses Fn::ImportValue like normal
        assert_1.expect(nestedUnderStack1).toMatch({
            Resources: {
                ResourceInNestedStack1: {
                    Type: 'Nested::Resource',
                    Properties: {
                        RefToSibling: {
                            'Fn::ImportValue': 'Stack2:ExportsOutputFnGetAttResourceInStack2MyAttributeC15F1009'
                        }
                    }
                }
            }
        });
        // verify a depedency was established between the parents
        const stack1Artifact = assembly.getStackByName(stack1.stackName);
        const stack2Artifact = assembly.getStackByName(stack2.stackName);
        test.deepEqual(stack1Artifact.dependencies.length, 1);
        test.deepEqual(stack2Artifact.dependencies.length, 0);
        test.same(stack1Artifact.dependencies[0], stack2Artifact);
        test.done();
    },
    'nested stack within a nested stack references a resource in a sibling top-level stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const consumerTopLevel = new core_1.Stack(app, 'ConsumerTopLevel');
        const consumerNested1 = new nested_stack_1.NestedStack(consumerTopLevel, 'ConsumerNested1');
        const consumerNested2 = new nested_stack_1.NestedStack(consumerNested1, 'ConsumerNested2');
        const producerTopLevel = new core_1.Stack(app, 'ProducerTopLevel');
        const producer = new core_1.CfnResource(producerTopLevel, 'Producer', { type: 'Producer' });
        // WHEN
        new core_1.CfnResource(consumerNested2, 'Consumer', {
            type: 'Consumer',
            properties: {
                Ref: producer.ref
            }
        });
        // THEN
        const manifest = app.synth();
        const consumerDeps = manifest.getStackArtifact(consumerTopLevel.artifactId).dependencies.map(d => d.id);
        test.deepEqual(consumerDeps, ['ProducerTopLevel']);
        test.done();
    },
    'another non-nested stack takes a reference on a resource within the nested stack (the parent exports)'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack1 = new core_1.Stack(app, 'Stack1');
        const stack2 = new core_1.Stack(app, 'Stack2');
        const nestedUnderStack1 = new nested_stack_1.NestedStack(stack1, 'NestedUnderStack1');
        const resourceInNestedStack = new core_1.CfnResource(nestedUnderStack1, 'ResourceInNestedStack', { type: 'MyResource' });
        // WHEN
        new core_1.CfnResource(stack2, 'ResourceInStack2', {
            type: 'JustResource',
            properties: {
                RefToSibling: resourceInNestedStack.getAtt('MyAttribute')
            }
        });
        // THEN
        const assembly = app.synth();
        // nested stack should output this value as if it was referenced by the parent (without the export)
        assert_1.expect(nestedUnderStack1).toMatch({
            Resources: {
                ResourceInNestedStack: {
                    Type: 'MyResource'
                }
            },
            Outputs: {
                Stack1NestedUnderStack1ResourceInNestedStack6EE9DCD2MyAttribute: {
                    Value: {
                        'Fn::GetAtt': [
                            'ResourceInNestedStack',
                            'MyAttribute'
                        ]
                    }
                }
            }
        });
        // parent stack (stack1) should export this value
        test.deepEqual(assembly.getStackByName(stack1.stackName).template.Outputs, {
            ExportsOutputFnGetAttNestedUnderStack1NestedStackNestedUnderStack1NestedStackResourceF616305BOutputsStack1NestedUnderStack1ResourceInNestedStack6EE9DCD2MyAttribute564EECF3: {
                Value: { 'Fn::GetAtt': ['NestedUnderStack1NestedStackNestedUnderStack1NestedStackResourceF616305B', 'Outputs.Stack1NestedUnderStack1ResourceInNestedStack6EE9DCD2MyAttribute'] },
                Export: { Name: 'Stack1:ExportsOutputFnGetAttNestedUnderStack1NestedStackNestedUnderStack1NestedStackResourceF616305BOutputsStack1NestedUnderStack1ResourceInNestedStack6EE9DCD2MyAttribute564EECF3' }
            }
        });
        // consuming stack should use ImportValue to import the value from the parent stack
        assert_1.expect(stack2).toMatch({
            Resources: {
                ResourceInStack2: {
                    Type: 'JustResource',
                    Properties: {
                        RefToSibling: {
                            'Fn::ImportValue': 'Stack1:ExportsOutputFnGetAttNestedUnderStack1NestedStackNestedUnderStack1NestedStackResourceF616305BOutputsStack1NestedUnderStack1ResourceInNestedStack6EE9DCD2MyAttribute564EECF3'
                        }
                    }
                }
            }
        });
        test.deepEqual(assembly.stacks.length, 2);
        const stack1Artifact = assembly.getStackByName(stack1.stackName);
        const stack2Artifact = assembly.getStackByName(stack2.stackName);
        test.deepEqual(stack1Artifact.dependencies.length, 0);
        test.deepEqual(stack2Artifact.dependencies.length, 1);
        test.same(stack2Artifact.dependencies[0], stack1Artifact);
        test.done();
    },
    'references between sibling nested stacks should output from one and getAtt from the other'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'Parent');
        const nested1 = new nested_stack_1.NestedStack(parent, 'Nested1');
        const nested2 = new nested_stack_1.NestedStack(parent, 'Nested2');
        const resource1 = new core_1.CfnResource(nested1, 'Resource1', { type: 'Resource1' });
        // WHEN
        new core_1.CfnResource(nested2, 'Resource2', {
            type: 'Resource2',
            properties: {
                RefToResource1: resource1.ref
            }
        });
        // THEN
        app.synth();
        // producing nested stack
        assert_1.expect(nested1).toMatch({
            Resources: {
                Resource1: {
                    Type: 'Resource1'
                }
            },
            Outputs: {
                ParentNested1Resource15F3F0657Ref: {
                    Value: {
                        Ref: 'Resource1'
                    }
                }
            }
        });
        // consuming nested stack
        assert_1.expect(nested2).toMatch({
            Resources: {
                Resource2: {
                    Type: 'Resource2',
                    Properties: {
                        RefToResource1: {
                            Ref: 'referencetoParentNested1NestedStackNested1NestedStackResource9C05342COutputsParentNested1Resource15F3F0657Ref'
                        }
                    }
                }
            },
            Parameters: {
                referencetoParentNested1NestedStackNested1NestedStackResource9C05342COutputsParentNested1Resource15F3F0657Ref: {
                    Type: 'String'
                }
            }
        });
        // parent
        assert_1.expect(parent).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                referencetoParentNested1NestedStackNested1NestedStackResource9C05342COutputsParentNested1Resource15F3F0657Ref: {
                    'Fn::GetAtt': [
                        'Nested1NestedStackNested1NestedStackResourceCD0AD36B',
                        'Outputs.ParentNested1Resource15F3F0657Ref'
                    ]
                }
            }
        }));
        test.done();
    },
    'stackId returns AWS::StackId when referenced from the context of the nested stack'(test) {
        // GIVEN
        const parent = new core_1.Stack();
        const nested = new nested_stack_1.NestedStack(parent, 'NestedStack');
        // WHEN
        new core_1.CfnResource(nested, 'NestedResource', {
            type: 'Nested::Resource',
            properties: { MyStackId: nested.stackId }
        });
        // THEN
        assert_1.expect(nested).to(assert_1.haveResource('Nested::Resource', {
            MyStackId: { Ref: 'AWS::StackId' }
        }));
        test.done();
    },
    'stackId returns the REF of the CloudFormation::Stack resource when referenced from the parent stack'(test) {
        // GIVEN
        const parent = new core_1.Stack();
        const nested = new nested_stack_1.NestedStack(parent, 'NestedStack');
        // WHEN
        new core_1.CfnResource(parent, 'ParentResource', {
            type: 'Parent::Resource',
            properties: { NestedStackId: nested.stackId }
        });
        // THEN
        assert_1.expect(parent).to(assert_1.haveResource('Parent::Resource', {
            NestedStackId: { Ref: 'NestedStackNestedStackNestedStackNestedStackResourceB70834FD' }
        }));
        test.done();
    },
    'stackName returns AWS::StackName when referenced from the context of the nested stack'(test) {
        // GIVEN
        const parent = new core_1.Stack();
        const nested = new nested_stack_1.NestedStack(parent, 'NestedStack');
        // WHEN
        new core_1.CfnResource(nested, 'NestedResource', {
            type: 'Nested::Resource',
            properties: { MyStackName: nested.stackName }
        });
        // THEN
        assert_1.expect(nested).to(assert_1.haveResource('Nested::Resource', {
            MyStackName: { Ref: 'AWS::StackName' }
        }));
        test.done();
    },
    'stackName returns the REF of the CloudFormation::Stack resource when referenced from the parent stack'(test) {
        // GIVEN
        const parent = new core_1.Stack();
        const nested = new nested_stack_1.NestedStack(parent, 'NestedStack');
        // WHEN
        new core_1.CfnResource(parent, 'ParentResource', {
            type: 'Parent::Resource',
            properties: { NestedStackName: nested.stackName }
        });
        // THEN
        assert_1.expect(parent).to(assert_1.haveResource('Parent::Resource', {
            NestedStackName: {
                'Fn::Select': [
                    1,
                    {
                        'Fn::Split': [
                            '/',
                            {
                                Ref: 'NestedStackNestedStackNestedStackNestedStackResourceB70834FD'
                            }
                        ]
                    }
                ]
            }
        }));
        test.done();
    },
    '"account", "region" and "environment" are all derived from the parent'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'ParentStack', { env: { account: '1234account', region: 'us-east-44' } });
        // WHEN
        const nested = new nested_stack_1.NestedStack(parent, 'NestedStack');
        // THEN
        test.deepEqual(nested.environment, parent.environment);
        test.deepEqual(nested.account, parent.account);
        test.deepEqual(nested.region, parent.region);
        test.done();
    },
    'double-nested stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'stack');
        // WHEN
        const nested1 = new nested_stack_1.NestedStack(parent, 'Nested1');
        const nested2 = new nested_stack_1.NestedStack(nested1, 'Nested2');
        new core_1.CfnResource(nested1, 'Resource1', { type: 'Resource::1' });
        new core_1.CfnResource(nested2, 'Resource2', { type: 'Resource::2' });
        // THEN
        const assembly = app.synth();
        // nested2 is a "leaf", so it's just the resource
        assert_1.expect(nested2).toMatch({
            Resources: {
                Resource2: { Type: 'Resource::2' }
            }
        });
        // nested1 wires the nested2 template through parameters, so we expect those
        assert_1.expect(nested1).to(assert_1.haveResource('Resource::1'));
        const nested2Template = assert_1.SynthUtils.toCloudFormation(nested1);
        test.deepEqual(nested2Template.Parameters, {
            referencetostackAssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3BucketE8768F5CRef: { Type: 'String' },
            referencetostackAssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3VersionKey49DD83A2Ref: { Type: 'String' },
        });
        // parent stack should have two sets of parameters. one for the first nested stack and the second
        // for the second nested stack, passed in as parameters to the first
        const template = assert_1.SynthUtils.toCloudFormation(parent);
        test.deepEqual(template.Parameters, {
            AssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3BucketDE3B88D6: { Type: 'String', Description: 'S3 bucket for asset "8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235c"' },
            AssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3VersionKey3A62EFEA: { Type: 'String', Description: 'S3 key for asset version "8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235c"' },
            AssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cArtifactHash7DC546E0: { Type: 'String', Description: 'Artifact hash for asset "8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235c"' },
            AssetParameters8b50795a950cca6b01352f162c45d9d274dee6bc409f2f2b2ed029ad6828b3bfS3Bucket76ACFB38: { Type: 'String', Description: 'S3 bucket for asset "8b50795a950cca6b01352f162c45d9d274dee6bc409f2f2b2ed029ad6828b3bf"' },
            AssetParameters8b50795a950cca6b01352f162c45d9d274dee6bc409f2f2b2ed029ad6828b3bfS3VersionKey04162EF1: { Type: 'String', Description: 'S3 key for asset version "8b50795a950cca6b01352f162c45d9d274dee6bc409f2f2b2ed029ad6828b3bf"' },
            AssetParameters8b50795a950cca6b01352f162c45d9d274dee6bc409f2f2b2ed029ad6828b3bfArtifactHashF227ADD3: { Type: 'String', Description: 'Artifact hash for asset "8b50795a950cca6b01352f162c45d9d274dee6bc409f2f2b2ed029ad6828b3bf"' }
        });
        // proxy asset params to nested stack
        assert_1.expect(parent).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                referencetostackAssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3BucketE8768F5CRef: { Ref: 'AssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3BucketDE3B88D6' },
                referencetostackAssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3VersionKey49DD83A2Ref: { Ref: 'AssetParameters8169c6f8aaeaf5e2e8620f5f895ffe2099202ccb4b6889df48fe0967a894235cS3VersionKey3A62EFEA' }
            }
        }));
        // parent stack should have 2 assets
        test.deepEqual(assembly.getStackByName(parent.stackName).assets.length, 2);
        test.done();
    },
    'assets within nested stacks are proxied from the parent'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'ParentStack');
        const nested = new nested_stack_1.NestedStack(parent, 'NestedStack');
        // WHEN
        const asset = new s3_assets.Asset(nested, 'asset', {
            path: path.join(__dirname, 'asset-fixture.txt')
        });
        new core_1.CfnResource(nested, 'NestedResource', {
            type: 'Nested::Resource',
            properties: {
                AssetBucket: asset.s3BucketName,
                AssetKey: asset.s3ObjectKey
            }
        });
        // THEN
        const assembly = app.synth();
        const template = assert_1.SynthUtils.toCloudFormation(parent);
        // two sets of asset parameters: one for the nested stack itself and one as a proxy for the asset within the stack
        test.deepEqual(template.Parameters, {
            AssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281S3BucketC188F637: { Type: 'String', Description: 'S3 bucket for asset "db01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281"' },
            AssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281S3VersionKeyC7F4DBF2: { Type: 'String', Description: 'S3 key for asset version "db01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281"' },
            AssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281ArtifactHash373B14D2: { Type: 'String', Description: 'Artifact hash for asset "db01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281"' },
            AssetParameters46b107d6db798ca46046b8669d057a4debcbdbaaddb6170400748c2f9e4f9d71S3Bucket3C4265E9: { Type: 'String', Description: 'S3 bucket for asset "46b107d6db798ca46046b8669d057a4debcbdbaaddb6170400748c2f9e4f9d71"' },
            AssetParameters46b107d6db798ca46046b8669d057a4debcbdbaaddb6170400748c2f9e4f9d71S3VersionKey8E981535: { Type: 'String', Description: 'S3 key for asset version "46b107d6db798ca46046b8669d057a4debcbdbaaddb6170400748c2f9e4f9d71"' },
            AssetParameters46b107d6db798ca46046b8669d057a4debcbdbaaddb6170400748c2f9e4f9d71ArtifactHash45A28583: { Type: 'String', Description: 'Artifact hash for asset "46b107d6db798ca46046b8669d057a4debcbdbaaddb6170400748c2f9e4f9d71"' }
        });
        // asset proxy parameters are passed to the nested stack
        assert_1.expect(parent).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                referencetoParentStackAssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281S3Bucket82C55B96Ref: { Ref: 'AssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281S3BucketC188F637' },
                referencetoParentStackAssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281S3VersionKeyA43C3CC6Ref: { Ref: 'AssetParametersdb01ee2eb7adc7915e364dc410d861e569543f9be3761d535a68d5c2cc181281S3VersionKeyC7F4DBF2' },
            }
        }));
        // parent stack should have 2 assets
        test.deepEqual(assembly.getStackByName(parent.stackName).assets.length, 2);
        test.done();
    },
    'docker image assets are wired through the top-level stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const parent = new core_1.Stack(app, 'my-stack');
        const nested = new nested_stack_1.NestedStack(parent, 'nested-stack');
        // WHEN
        const location = nested.addDockerImageAsset({
            directoryName: 'my-image',
            dockerBuildArgs: { key: 'value', boom: 'bam' },
            dockerBuildTarget: 'buildTarget',
            sourceHash: 'hash-of-source',
        });
        // use the asset, so the parameters will be wired.
        new sns.Topic(nested, 'MyTopic', {
            displayName: `image location is ${location.imageUri}`
        });
        // THEN
        const asm = app.synth();
        test.deepEqual(asm.getStackArtifact(parent.artifactId).assets, [
            {
                repositoryName: 'aws-cdk/assets',
                imageTag: 'hash-of-source',
                id: 'hash-of-source',
                packaging: 'container-image',
                path: 'my-image',
                sourceHash: 'hash-of-source',
                buildArgs: { key: 'value', boom: 'bam' },
                target: 'buildTarget'
            },
            {
                path: 'mystacknestedstackFAE12FB5.nested.template.json',
                id: 'fcdaee79eb79f37eca3a9b1cc0cc9ba150e4eea8c5d6d0c343cb6cd9dc68e2e5',
                packaging: 'file',
                sourceHash: 'fcdaee79eb79f37eca3a9b1cc0cc9ba150e4eea8c5d6d0c343cb6cd9dc68e2e5',
                s3BucketParameter: 'AssetParametersfcdaee79eb79f37eca3a9b1cc0cc9ba150e4eea8c5d6d0c343cb6cd9dc68e2e5S3Bucket67A749F8',
                s3KeyParameter: 'AssetParametersfcdaee79eb79f37eca3a9b1cc0cc9ba150e4eea8c5d6d0c343cb6cd9dc68e2e5S3VersionKeyE1E6A8D4',
                artifactHashParameter: 'AssetParametersfcdaee79eb79f37eca3a9b1cc0cc9ba150e4eea8c5d6d0c343cb6cd9dc68e2e5ArtifactHash0AEDBE8A'
            }
        ]);
        test.done();
    },
    'metadata defined in nested stacks is reported at the parent stack level in the cloud assembly'(test) {
        // GIVEN
        const app = new core_1.App({ stackTraces: false });
        const parent = new core_1.Stack(app, 'parent');
        const child = new core_1.Stack(parent, 'child');
        const nested = new nested_stack_1.NestedStack(child, 'nested');
        const resource = new core_1.CfnResource(nested, 'resource', { type: 'foo' });
        // WHEN
        resource.node.addMetadata('foo', 'bar');
        // THEN: the first non-nested stack records the assembly metadata
        const asm = app.synth();
        test.deepEqual(asm.stacks.length, 2); // only one stack is defined as an artifact
        test.deepEqual(asm.getStackByName(parent.stackName).findMetadataByType('foo'), []);
        test.deepEqual(asm.getStackByName(child.stackName).findMetadataByType('foo'), [
            {
                path: '/parent/child/nested/resource',
                type: 'foo',
                data: 'bar'
            }
        ]);
        test.done();
    },
    'referencing attributes with period across stacks'(test) {
        // GIVEN
        const parent = new core_1.Stack();
        const nested = new nested_stack_1.NestedStack(parent, 'nested');
        const consumed = new core_1.CfnResource(nested, 'resource-in-nested', { type: 'CONSUMED' });
        // WHEN
        new core_1.CfnResource(parent, 'resource-in-parent', {
            type: 'CONSUMER',
            properties: {
                ConsumedAttribute: consumed.getAtt('Consumed.Attribute')
            }
        });
        // THEN
        assert_1.expect(nested).toMatch({
            Resources: {
                resourceinnested: {
                    Type: 'CONSUMED'
                }
            },
            Outputs: {
                nestedresourceinnested59B1F01CConsumedAttribute: {
                    Value: {
                        'Fn::GetAtt': [
                            'resourceinnested',
                            'Consumed.Attribute'
                        ]
                    }
                }
            }
        });
        assert_1.expect(parent).to(assert_1.haveResource('CONSUMER', {
            ConsumedAttribute: {
                'Fn::GetAtt': [
                    'nestedNestedStacknestedNestedStackResource3DD143BF',
                    'Outputs.nestedresourceinnested59B1F01CConsumedAttribute'
                ]
            }
        }));
        test.done();
    },
    'missing context in nested stack is reported if the context is not available'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'ParentStack', { env: { account: '1234account', region: 'us-east-44' } });
        const nestedStack = new nested_stack_1.NestedStack(stack, 'nested');
        const provider = 'dummyProvider';
        const expectedKey = core_1.ContextProvider.getKey(nestedStack, {
            provider
        }).key;
        // WHEN
        core_1.ContextProvider.getValue(nestedStack, {
            provider,
            dummyValue: ['dummy1a', 'dummy1b', 'dummy1c'],
        });
        // THEN: missing context is reported in the cloud assembly
        const asm = app.synth();
        const missing = asm.manifest.missing;
        test.ok(missing && missing.find(m => {
            return (m.key === expectedKey);
        }));
        test.done();
    },
    'references to a resource from a deeply nested stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const top = new core_1.Stack(app, 'stack');
        const topLevel = new core_1.CfnResource(top, 'toplevel', { type: 'TopLevel' });
        const nested1 = new nested_stack_1.NestedStack(top, 'nested1');
        const nested2 = new nested_stack_1.NestedStack(nested1, 'nested2');
        // WHEN
        new core_1.CfnResource(nested2, 'refToTopLevel', {
            type: 'BottomLevel',
            properties: { RefToTopLevel: topLevel.ref }
        });
        // THEN
        assert_1.expect(top).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                referencetostackAssetParameters842982bd421cce9742ba27151ef12ed699d44d22801f41e8029f63f2358a3f2fS3Bucket5DA5D2E7Ref: {
                    Ref: 'AssetParameters842982bd421cce9742ba27151ef12ed699d44d22801f41e8029f63f2358a3f2fS3BucketDD4D96B5'
                },
                referencetostackAssetParameters842982bd421cce9742ba27151ef12ed699d44d22801f41e8029f63f2358a3f2fS3VersionKey8FBE5C12Ref: {
                    Ref: 'AssetParameters842982bd421cce9742ba27151ef12ed699d44d22801f41e8029f63f2358a3f2fS3VersionKey83E381F3'
                },
                referencetostacktoplevelBB16BF13Ref: {
                    Ref: 'toplevel'
                }
            }
        }));
        assert_1.expect(nested1).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                referencetostacktoplevelBB16BF13Ref: {
                    Ref: 'referencetostacktoplevelBB16BF13Ref'
                }
            }
        }));
        assert_1.expect(nested2).to(assert_1.matchTemplate({
            Resources: {
                refToTopLevel: {
                    Type: 'BottomLevel',
                    Properties: {
                        RefToTopLevel: {
                            Ref: 'referencetostacktoplevelBB16BF13Ref'
                        }
                    }
                }
            },
            Parameters: {
                referencetostacktoplevelBB16BF13Ref: {
                    Type: 'String'
                },
            },
        }));
        test.done();
    },
    'bottom nested stack consumes value from a top-level stack through a parameter in a middle nested stack'(test) {
        // GIVEN
        const app = new core_1.App();
        const top = new core_1.Stack(app, 'Grandparent');
        const middle = new nested_stack_1.NestedStack(top, 'Parent');
        const bottom = new nested_stack_1.NestedStack(middle, 'Child');
        const resourceInGrandparent = new core_1.CfnResource(top, 'ResourceInGrandparent', { type: 'ResourceInGrandparent' });
        // WHEN
        new core_1.CfnResource(bottom, 'ResourceInChild', {
            type: 'ResourceInChild',
            properties: {
                RefToGrandparent: resourceInGrandparent.ref
            }
        });
        // THEN
        // this is the name allocated for the parameter that's propagated through
        // the hierarchy.
        const paramName = 'referencetoGrandparentResourceInGrandparent010E997ARef';
        // child (bottom) references through a parameter.
        assert_1.expect(bottom).toMatch({
            Resources: {
                ResourceInChild: {
                    Type: 'ResourceInChild',
                    Properties: {
                        RefToGrandparent: { Ref: paramName }
                    }
                }
            },
            Parameters: {
                [paramName]: { Type: 'String' }
            }
        });
        // the parent (middle) sets the value of this parameter to be a reference to another parameter
        assert_1.expect(middle).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                [paramName]: { Ref: paramName }
            }
        }));
        // grandparent (top) assigns the actual value to the parameter
        assert_1.expect(top).to(assert_1.haveResource('AWS::CloudFormation::Stack', {
            Parameters: {
                [paramName]: { Ref: 'ResourceInGrandparent' },
                // these are for the asset of the bottom nested stack
                referencetoGrandparentAssetParameters3208f43b793a1dbe28ca02cf31fb975489071beb42c492b22dc3d32decc3b4b7S3Bucket06EEE58DRef: {
                    Ref: 'AssetParameters3208f43b793a1dbe28ca02cf31fb975489071beb42c492b22dc3d32decc3b4b7S3Bucket01877C2E'
                },
                referencetoGrandparentAssetParameters3208f43b793a1dbe28ca02cf31fb975489071beb42c492b22dc3d32decc3b4b7S3VersionKeyD3B04909Ref: {
                    Ref: 'AssetParameters3208f43b793a1dbe28ca02cf31fb975489071beb42c492b22dc3d32decc3b4b7S3VersionKey5765F084'
                }
            }
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,