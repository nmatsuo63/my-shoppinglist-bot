"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockDeployStack = jest.fn();
jest.mock('../../lib/api/deploy-stack', () => ({
    deployStack: mockDeployStack,
}));
const bootstrap_environment2_1 = require("../../lib/api/bootstrap/bootstrap-environment2");
const mock_sdk_1 = require("../util/mock-sdk");
describe('Bootstrapping v2', () => {
    const env = {
        account: '123456789012',
        region: 'us-east-1',
        name: 'mock',
    };
    const sdk = new mock_sdk_1.MockSdkProvider();
    test('passes the bucket name as a CFN parameter', async () => {
        await bootstrap_environment2_1.bootstrapEnvironment2(env, sdk, 'mockStack', undefined, {
            bucketName: 'my-bucket-name',
        });
        expect(mockDeployStack).toHaveBeenCalledWith(expect.objectContaining({
            parameters: {
                FileAssetsBucketName: 'my-bucket-name',
            },
        }));
    });
    test('passes the KMS key ID as a CFN parameter', async () => {
        await bootstrap_environment2_1.bootstrapEnvironment2(env, sdk, 'mockStack', undefined, {
            kmsKeyId: 'my-kms-key-id',
        });
        expect(mockDeployStack).toHaveBeenCalledWith(expect.objectContaining({
            parameters: {
                FileAssetsBucketKmsKeyId: 'my-kms-key-id',
            },
        }));
    });
    test('passing trusted accounts without CFN managed policies results in an error', async () => {
        await expect(bootstrap_environment2_1.bootstrapEnvironment2(env, sdk, 'mockStack', undefined, {
            trustedAccounts: ['123456789012'],
        }))
            .rejects
            .toThrow('--cloudformation-execution-policies are required if --trust has been passed!');
    });
    afterEach(() => {
        mockDeployStack.mockClear();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwMi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwMi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM3QyxXQUFXLEVBQUUsZUFBZTtDQUM3QixDQUFDLENBQUMsQ0FBQztBQUVKLDJGQUF1RjtBQUN2RiwrQ0FBbUQ7QUFFbkQsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxNQUFNLEdBQUcsR0FBRztRQUNWLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLE1BQU0sRUFBRSxXQUFXO1FBQ25CLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQztJQUNGLE1BQU0sR0FBRyxHQUFHLElBQUksMEJBQWUsRUFBRSxDQUFDO0lBRWxDLElBQUksQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzRCxNQUFNLDhDQUFxQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRTtZQUM1RCxVQUFVLEVBQUUsZ0JBQWdCO1NBQzdCLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDbkUsVUFBVSxFQUFFO2dCQUNWLG9CQUFvQixFQUFFLGdCQUFnQjthQUN2QztTQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUQsTUFBTSw4Q0FBcUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUU7WUFDNUQsUUFBUSxFQUFFLGVBQWU7U0FDMUIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNuRSxVQUFVLEVBQUU7Z0JBQ1Ysd0JBQXdCLEVBQUUsZUFBZTthQUMxQztTQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMkVBQTJFLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0YsTUFBTSxNQUFNLENBQUMsOENBQXFCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1lBQ25FLGVBQWUsRUFBRSxDQUFDLGNBQWMsQ0FBQztTQUNsQyxDQUFDLENBQUM7YUFDQSxPQUFPO2FBQ1AsT0FBTyxDQUFDLDhFQUE4RSxDQUFDLENBQUM7SUFDN0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb2NrRGVwbG95U3RhY2sgPSBqZXN0LmZuKCk7XG5cbmplc3QubW9jaygnLi4vLi4vbGliL2FwaS9kZXBsb3ktc3RhY2snLCAoKSA9PiAoe1xuICBkZXBsb3lTdGFjazogbW9ja0RlcGxveVN0YWNrLFxufSkpO1xuXG5pbXBvcnQgeyBib290c3RyYXBFbnZpcm9ubWVudDIgfSBmcm9tICcuLi8uLi9saWIvYXBpL2Jvb3RzdHJhcC9ib290c3RyYXAtZW52aXJvbm1lbnQyJztcbmltcG9ydCB7IE1vY2tTZGtQcm92aWRlciB9IGZyb20gJy4uL3V0aWwvbW9jay1zZGsnO1xuXG5kZXNjcmliZSgnQm9vdHN0cmFwcGluZyB2MicsICgpID0+IHtcbiAgY29uc3QgZW52ID0ge1xuICAgIGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLFxuICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG4gICAgbmFtZTogJ21vY2snLFxuICB9O1xuICBjb25zdCBzZGsgPSBuZXcgTW9ja1Nka1Byb3ZpZGVyKCk7XG5cbiAgdGVzdCgncGFzc2VzIHRoZSBidWNrZXQgbmFtZSBhcyBhIENGTiBwYXJhbWV0ZXInLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYm9vdHN0cmFwRW52aXJvbm1lbnQyKGVudiwgc2RrLCAnbW9ja1N0YWNrJywgdW5kZWZpbmVkLCB7XG4gICAgICBidWNrZXROYW1lOiAnbXktYnVja2V0LW5hbWUnLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1vY2tEZXBsb3lTdGFjaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBGaWxlQXNzZXRzQnVja2V0TmFtZTogJ215LWJ1Y2tldC1uYW1lJyxcbiAgICAgIH0sXG4gICAgfSkpO1xuICB9KTtcblxuICB0ZXN0KCdwYXNzZXMgdGhlIEtNUyBrZXkgSUQgYXMgYSBDRk4gcGFyYW1ldGVyJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGJvb3RzdHJhcEVudmlyb25tZW50MihlbnYsIHNkaywgJ21vY2tTdGFjaycsIHVuZGVmaW5lZCwge1xuICAgICAga21zS2V5SWQ6ICdteS1rbXMta2V5LWlkJyxcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrRGVwbG95U3RhY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgRmlsZUFzc2V0c0J1Y2tldEttc0tleUlkOiAnbXkta21zLWtleS1pZCcsXG4gICAgICB9LFxuICAgIH0pKTtcbiAgfSk7XG5cbiAgdGVzdCgncGFzc2luZyB0cnVzdGVkIGFjY291bnRzIHdpdGhvdXQgQ0ZOIG1hbmFnZWQgcG9saWNpZXMgcmVzdWx0cyBpbiBhbiBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBleHBlY3QoYm9vdHN0cmFwRW52aXJvbm1lbnQyKGVudiwgc2RrLCAnbW9ja1N0YWNrJywgdW5kZWZpbmVkLCB7XG4gICAgICB0cnVzdGVkQWNjb3VudHM6IFsnMTIzNDU2Nzg5MDEyJ10sXG4gICAgfSkpXG4gICAgICAucmVqZWN0c1xuICAgICAgLnRvVGhyb3coJy0tY2xvdWRmb3JtYXRpb24tZXhlY3V0aW9uLXBvbGljaWVzIGFyZSByZXF1aXJlZCBpZiAtLXRydXN0IGhhcyBiZWVuIHBhc3NlZCEnKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBtb2NrRGVwbG95U3RhY2subW9ja0NsZWFyKCk7XG4gIH0pO1xufSk7XG4iXX0=