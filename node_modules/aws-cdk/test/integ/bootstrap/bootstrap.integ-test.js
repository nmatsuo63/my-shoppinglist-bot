"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@aws-cdk/core");
const fs = require("fs-extra");
const path = require("path");
const api_1 = require("../../../lib/api");
const bootstrap_environment2_1 = require("../../../lib/api/bootstrap/bootstrap-environment2");
const my_test_cdk_stack_1 = require("./example-cdk-app/my-test-cdk-stack");
jest.setTimeout(600000);
describe('Bootstrapping', () => {
    const bootstrapStackName = 'AwsCdkBootstrapIntegTestLegacy';
    const account = requireEnvVariable('TEST_ACCOUNT');
    const region = requireEnvVariable('TEST_REGION');
    let s3;
    let env;
    let sdkProvider;
    let sdk;
    beforeAll(async () => {
        env = {
            name: 'aws-cdk-bootstrap-integ-test',
            account,
            region,
        };
        sdkProvider = await api_1.SdkProvider.withAwsCliCompatibleDefaults({
            httpOptions: {
                userAgent: 'aws-cdk-bootstrap-integ-test',
            }
        });
        sdk = await sdkProvider.forEnvironment(env.account, env.region, api_1.Mode.ForWriting);
        s3 = sdk.s3();
    });
    describe('deploys the legacy bootstrap stack', () => {
        const legacyBootstrapBucketName = 'aws-cdk-bootstrap-integ-test-legacy-bckt';
        const newBootstrapBucketName = 'aws-cdk-bootstrap-integ-test-v2-bckt';
        const exampleAppStack = 'BootstrapIntegTestExampleCdkAppStack';
        const outdir = path.join(__dirname, 'cdk.out');
        let bootstrapStack;
        let testStack;
        beforeAll(async () => {
            // bootstrap the "old" way
            const bootstrapResults = await api_1.bootstrapEnvironment(env, sdkProvider, bootstrapStackName, undefined, {
                bucketName: legacyBootstrapBucketName,
            });
            bootstrapStack = bootstrapResults.stackArtifact;
        });
        test('and then can deploy a CDK app using that bootstrap stack', async () => {
            testStack = await deployCdkApp(outdir, env, sdkProvider, sdk, bootstrapStackName, (app) => {
                new my_test_cdk_stack_1.MyTestCdkStack(app, exampleAppStack, {
                    assetType: my_test_cdk_stack_1.ExampleAsset.ASSET_1,
                    env,
                });
            });
        });
        describe('and then updates the bootstrap stack with the new resources', () => {
            beforeAll(async () => {
                // bootstrap the "new" way
                const bootstrapResults = await bootstrap_environment2_1.bootstrapEnvironment2(env, sdkProvider, bootstrapStackName, undefined, {
                    bucketName: newBootstrapBucketName,
                    trustedAccounts: ['790124522186', '593667001225'],
                    cloudFormationExecutionPolicies: [
                        'arn:aws:iam::aws:policy/AdministratorAccess',
                        'arn:aws:iam::aws:policy/AmazonS3FullAccess',
                    ],
                });
                bootstrapStack = bootstrapResults.stackArtifact;
            });
            test('can now update the CDK app with the new bootstrap stack', async () => {
                await deployCdkApp(outdir, env, sdkProvider, sdk, bootstrapStackName, (app) => {
                    new my_test_cdk_stack_1.MyTestCdkStack(app, exampleAppStack, {
                        assetType: my_test_cdk_stack_1.ExampleAsset.ASSET_2,
                        env,
                    });
                });
            });
            afterAll(async () => {
                // empty and delete the now orphaned previous bootstrap bucket
                await emptyBucket(s3, legacyBootstrapBucketName);
                return s3.deleteBucket({ Bucket: legacyBootstrapBucketName }).promise();
            });
        });
        afterAll(() => {
            // delete the test CDK app stack
            return api_1.destroyStack({
                stack: testStack,
                sdk,
            });
        });
        afterAll(async () => {
            // empty the bootstrap bucket -
            // otherwise, CloudFormation will fail to delete the bootstrap stack
            await emptyBucket(s3, newBootstrapBucketName);
            return api_1.destroyStack({
                stack: bootstrapStack,
                sdk,
            });
        });
    });
});
function requireEnvVariable(variableName) {
    const ret = process.env[variableName];
    if (!ret) {
        throw new Error(`It is mandatory to set the '${variableName}' environment variable before running this test`);
    }
    return ret;
}
async function deployCdkApp(outdir, env, sdkProvider, sdk, bootstrapStackName, cdkCode) {
    // clean the output directory, just to make 100% sure there is no junk left there
    await fs.remove(outdir);
    // synthesize an app to a local cdk.out
    const app = new core.App({ outdir });
    cdkCode(app);
    const assembly = app.synth();
    // now deploy the synthesized app
    const toolkitInfo = await api_1.ToolkitInfo.lookup(env, sdk, bootstrapStackName);
    const testStack = assembly.stacks[0]; // we assume there's just one stack
    await api_1.deployStack({
        stack: testStack,
        resolvedEnvironment: env,
        toolkitInfo,
        sdkProvider,
        sdk,
    });
    return testStack;
}
async function emptyBucket(s3, bucketName) {
    const objects = await s3.listObjects({ Bucket: bucketName }).promise();
    const deletes = (objects.Contents || []).map(obj => obj.Key || '').filter(d => !!d);
    if (deletes.length === 0) {
        return Promise.resolve();
    }
    return s3.deleteObjects({
        Bucket: bucketName,
        Delete: {
            Objects: deletes.map(d => ({ Key: d })),
            Quiet: false,
        },
    }).promise();
}
//# sourceMappingURL=data:application/json;base64,