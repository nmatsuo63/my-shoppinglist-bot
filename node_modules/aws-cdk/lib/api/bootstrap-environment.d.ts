import * as cxapi from '@aws-cdk/cx-api';
import { Tag } from '../cdk-toolkit';
import { SdkProvider } from './aws-auth';
import { DeployStackResult } from './deploy-stack';
/** @experimental */
export declare const BUCKET_NAME_OUTPUT = "BucketName";
/** @experimental */
export declare const REPOSITORY_NAME_OUTPUT = "RepositoryName";
/** @experimental */
export declare const BUCKET_DOMAIN_NAME_OUTPUT = "BucketDomainName";
export interface BootstrapEnvironmentProps {
    /**
     * The name to be given to the CDK Bootstrap bucket.
     *
     * @default - a name is generated by CloudFormation.
     */
    readonly bucketName?: string;
    /**
     * The ID of an existing KMS key to be used for encrypting items in the bucket.
     *
     * @default - the default KMS key for S3 will be used.
     */
    readonly kmsKeyId?: string;
    /**
     * Tags for cdktoolkit stack.
     *
     * @default - None.
     */
    readonly tags?: Tag[];
    /**
     * Whether to execute the changeset or only create it and leave it in review.
     * @default true
     */
    readonly execute?: boolean;
    /**
     * The list of AWS account IDs that are trusted to deploy into the environment being bootstrapped.
     *
     * @default - only the bootstrapped account can deploy into this environment
     */
    readonly trustedAccounts?: string[];
    /**
     * The ARNs of the IAM managed policies that should be attached to the role performing CloudFormation deployments.
     * In most cases, this will be the AdministratorAccess policy.
     * At least one policy is required if {@link trustedAccounts} were passed.
     *
     * @default - the role will have no policies attached
     */
    readonly cloudFormationExecutionPolicies?: string[];
}
/** @experimental */
export declare function bootstrapEnvironment(environment: cxapi.Environment, sdkProvider: SdkProvider, toolkitStackName: string, roleArn: string | undefined, props?: BootstrapEnvironmentProps): Promise<DeployStackResult>;
