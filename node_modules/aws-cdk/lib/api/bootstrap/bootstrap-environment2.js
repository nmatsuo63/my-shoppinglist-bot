"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const __1 = require("..");
const serialize_1 = require("../../serialize");
const aws_auth_1 = require("../aws-auth");
async function bootstrapEnvironment2(environment, sdkProvider, toolkitStackName, roleArn, props = {}) {
    var _a, _b, _c, _d;
    if (((_a = props.trustedAccounts) === null || _a === void 0 ? void 0 : _a.length) && !((_b = props.cloudFormationExecutionPolicies) === null || _b === void 0 ? void 0 : _b.length)) {
        throw new Error('--cloudformation-execution-policies are required if --trust has been passed!');
    }
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap-new'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    // convert from YAML to JSON (which the Cloud Assembly uses)
    const templateFile = `${toolkitStackName}.template.json`;
    const bootstrapTemplatePath = path.join(__dirname, 'bootstrap-template.yaml');
    const bootstrapTemplateObject = await serialize_1.loadStructuredFile(bootstrapTemplatePath);
    await fs.writeJson(path.join(builder.outdir, templateFile), bootstrapTemplateObject);
    builder.addArtifact(toolkitStackName, {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile,
        },
    });
    const resolvedEnvironment = await sdkProvider.resolveEnvironment(environment.account, environment.region);
    const assembly = builder.buildAssembly();
    return await __1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        resolvedEnvironment,
        sdk: await sdkProvider.forEnvironment(environment.account, environment.region, aws_auth_1.Mode.ForWriting),
        sdkProvider,
        roleArn,
        tags: props.tags,
        execute: props.execute,
        parameters: {
            FileAssetsBucketName: props.bucketName,
            FileAssetsBucketKmsKeyId: props.kmsKeyId,
            TrustedAccounts: (_c = props.trustedAccounts) === null || _c === void 0 ? void 0 : _c.join(','),
            CloudFormationExecutionPolicies: (_d = props.cloudFormationExecutionPolicies) === null || _d === void 0 ? void 0 : _d.join(','),
        },
    });
}
exports.bootstrapEnvironment2 = bootstrapEnvironment2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb3RzdHJhcC1lbnZpcm9ubWVudDIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMkQ7QUFDM0QseUNBQXlDO0FBQ3pDLCtCQUErQjtBQUMvQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDBCQUErRTtBQUMvRSwrQ0FBcUQ7QUFDckQsMENBQWdEO0FBRXpDLEtBQUssVUFBVSxxQkFBcUIsQ0FDekMsV0FBOEIsRUFBRSxXQUF3QixFQUN4RCxnQkFBd0IsRUFBRSxPQUEyQixFQUNyRCxRQUFtQyxFQUFFOztJQUNyQyxJQUFJLE9BQUEsS0FBSyxDQUFDLGVBQWUsMENBQUUsTUFBTSxLQUFJLFFBQUMsS0FBSyxDQUFDLCtCQUErQiwwQ0FBRSxNQUFNLENBQUEsRUFBRTtRQUNuRixNQUFNLElBQUksS0FBSyxDQUFDLDhFQUE4RSxDQUFDLENBQUM7S0FDakc7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXZELDREQUE0RDtJQUM1RCxNQUFNLFlBQVksR0FBRyxHQUFHLGdCQUFnQixnQkFBZ0IsQ0FBQztJQUN6RCxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDOUUsTUFBTSx1QkFBdUIsR0FBRyxNQUFNLDhCQUFrQixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDaEYsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQ3ZDLHVCQUF1QixDQUFDLENBQUM7SUFFM0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNwQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyx3QkFBd0I7UUFDcEQsV0FBVyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25GLFVBQVUsRUFBRTtZQUNWLFlBQVk7U0FDYjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxXQUFXLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFMUcsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLE9BQU8sTUFBTSxlQUFXLENBQUM7UUFDdkIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7UUFDaEQsbUJBQW1CO1FBQ25CLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFLGVBQUksQ0FBQyxVQUFVLENBQUM7UUFDL0YsV0FBVztRQUNYLE9BQU87UUFDUCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7UUFDaEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ3RCLFVBQVUsRUFBRTtZQUNWLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQ3RDLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hDLGVBQWUsUUFBRSxLQUFLLENBQUMsZUFBZSwwQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ2pELCtCQUErQixRQUFFLEtBQUssQ0FBQywrQkFBK0IsMENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNsRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUE3Q0Qsc0RBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3hzY2hlbWEgZnJvbSAnQGF3cy1jZGsvY2xvdWQtYXNzZW1ibHktc2NoZW1hJztcbmltcG9ydCAqIGFzIGN4YXBpIGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQm9vdHN0cmFwRW52aXJvbm1lbnRQcm9wcywgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgbG9hZFN0cnVjdHVyZWRGaWxlIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplJztcbmltcG9ydCB7IE1vZGUsIFNka1Byb3ZpZGVyIH0gZnJvbSAnLi4vYXdzLWF1dGgnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwRW52aXJvbm1lbnQyKFxuICBlbnZpcm9ubWVudDogY3hhcGkuRW52aXJvbm1lbnQsIHNka1Byb3ZpZGVyOiBTZGtQcm92aWRlcixcbiAgdG9vbGtpdFN0YWNrTmFtZTogc3RyaW5nLCByb2xlQXJuOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIHByb3BzOiBCb290c3RyYXBFbnZpcm9ubWVudFByb3BzID0ge30pOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG4gIGlmIChwcm9wcy50cnVzdGVkQWNjb3VudHM/Lmxlbmd0aCAmJiAhcHJvcHMuY2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llcz8ubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCctLWNsb3VkZm9ybWF0aW9uLWV4ZWN1dGlvbi1wb2xpY2llcyBhcmUgcmVxdWlyZWQgaWYgLS10cnVzdCBoYXMgYmVlbiBwYXNzZWQhJyk7XG4gIH1cblxuICBjb25zdCBvdXRkaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2Nkay1ib290c3RyYXAtbmV3JykpO1xuICBjb25zdCBidWlsZGVyID0gbmV3IGN4YXBpLkNsb3VkQXNzZW1ibHlCdWlsZGVyKG91dGRpcik7XG5cbiAgLy8gY29udmVydCBmcm9tIFlBTUwgdG8gSlNPTiAod2hpY2ggdGhlIENsb3VkIEFzc2VtYmx5IHVzZXMpXG4gIGNvbnN0IHRlbXBsYXRlRmlsZSA9IGAke3Rvb2xraXRTdGFja05hbWV9LnRlbXBsYXRlLmpzb25gO1xuICBjb25zdCBib290c3RyYXBUZW1wbGF0ZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnYm9vdHN0cmFwLXRlbXBsYXRlLnlhbWwnKTtcbiAgY29uc3QgYm9vdHN0cmFwVGVtcGxhdGVPYmplY3QgPSBhd2FpdCBsb2FkU3RydWN0dXJlZEZpbGUoYm9vdHN0cmFwVGVtcGxhdGVQYXRoKTtcbiAgYXdhaXQgZnMud3JpdGVKc29uKFxuICAgIHBhdGguam9pbihidWlsZGVyLm91dGRpciwgdGVtcGxhdGVGaWxlKSxcbiAgICBib290c3RyYXBUZW1wbGF0ZU9iamVjdCk7XG5cbiAgYnVpbGRlci5hZGRBcnRpZmFjdCh0b29sa2l0U3RhY2tOYW1lLCB7XG4gICAgdHlwZTogY3hzY2hlbWEuQXJ0aWZhY3RUeXBlLkFXU19DTE9VREZPUk1BVElPTl9TVEFDSyxcbiAgICBlbnZpcm9ubWVudDogY3hhcGkuRW52aXJvbm1lbnRVdGlscy5mb3JtYXQoZW52aXJvbm1lbnQuYWNjb3VudCwgZW52aXJvbm1lbnQucmVnaW9uKSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB0ZW1wbGF0ZUZpbGUsXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgcmVzb2x2ZWRFbnZpcm9ubWVudCA9IGF3YWl0IHNka1Byb3ZpZGVyLnJlc29sdmVFbnZpcm9ubWVudChlbnZpcm9ubWVudC5hY2NvdW50LCBlbnZpcm9ubWVudC5yZWdpb24pO1xuXG4gIGNvbnN0IGFzc2VtYmx5ID0gYnVpbGRlci5idWlsZEFzc2VtYmx5KCk7XG4gIHJldHVybiBhd2FpdCBkZXBsb3lTdGFjayh7XG4gICAgc3RhY2s6IGFzc2VtYmx5LmdldFN0YWNrQnlOYW1lKHRvb2xraXRTdGFja05hbWUpLFxuICAgIHJlc29sdmVkRW52aXJvbm1lbnQsXG4gICAgc2RrOiBhd2FpdCBzZGtQcm92aWRlci5mb3JFbnZpcm9ubWVudChlbnZpcm9ubWVudC5hY2NvdW50LCBlbnZpcm9ubWVudC5yZWdpb24sIE1vZGUuRm9yV3JpdGluZyksXG4gICAgc2RrUHJvdmlkZXIsXG4gICAgcm9sZUFybixcbiAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgIGV4ZWN1dGU6IHByb3BzLmV4ZWN1dGUsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgRmlsZUFzc2V0c0J1Y2tldE5hbWU6IHByb3BzLmJ1Y2tldE5hbWUsXG4gICAgICBGaWxlQXNzZXRzQnVja2V0S21zS2V5SWQ6IHByb3BzLmttc0tleUlkLFxuICAgICAgVHJ1c3RlZEFjY291bnRzOiBwcm9wcy50cnVzdGVkQWNjb3VudHM/LmpvaW4oJywnKSxcbiAgICAgIENsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM6IHByb3BzLmNsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM/LmpvaW4oJywnKSxcbiAgICB9LFxuICB9KTtcbn1cbiJdfQ==