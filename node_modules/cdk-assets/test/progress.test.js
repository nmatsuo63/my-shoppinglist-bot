"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const mockfs = require("mock-fs");
const lib_1 = require("../lib");
const mock_aws_1 = require("./mock-aws");
let aws;
beforeEach(() => {
    mockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                theAsset: {
                    source: {
                        path: 'some_file'
                    },
                    destinations: {
                        theDestination1: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key',
                        },
                        theDestination2: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key2',
                        },
                    },
                },
            },
        }),
        '/simple/cdk.out/some_file': 'FILE_CONTENTS',
    });
    aws = mock_aws_1.mockAws();
    // Accept all S3 uploads as new
    aws.mockS3.getBucketLocation = mock_aws_1.mockedApiResult({});
    aws.mockS3.headObject = mock_aws_1.mockedApiFailure('NotFound', 'File does not exist');
    aws.mockS3.upload = mock_aws_1.mockUpload();
});
afterEach(() => {
    mockfs.restore();
});
test('test listener', async () => {
    const progressListener = new FakeListener();
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws, progressListener });
    await pub.publish();
    const allMessages = progressListener.messages.join('\n');
    // Log mentions asset/destination ids
    expect(allMessages).toContain('theAsset:theDestination1');
    expect(allMessages).toContain('theAsset:theDestination2');
});
test('test abort', async () => {
    const progressListener = new FakeListener(true);
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws, progressListener });
    await pub.publish();
    const allMessages = progressListener.messages.join('\n');
    // We never get to asset 2
    expect(allMessages).not.toContain('theAsset:theDestination2');
});
class FakeListener {
    constructor(doAbort = false) {
        this.doAbort = doAbort;
        this.messages = new Array();
    }
    onPublishEvent(_type, event) {
        this.messages.push(event.message);
        if (this.doAbort) {
            event.abort();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb2dyZXNzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrRUFBaUU7QUFDakUsa0NBQWtDO0FBQ2xDLGdDQUErRztBQUMvRyx5Q0FBb0Y7QUFFcEYsSUFBSSxHQUErQixDQUFDO0FBQ3BDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxNQUFNLENBQUM7UUFDTCw2QkFBNkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzVDLE9BQU8sRUFBRSx1Q0FBbUIsQ0FBQyxjQUFjLEVBQUU7WUFDN0MsS0FBSyxFQUFFO2dCQUNMLFFBQVEsRUFBRTtvQkFDUixNQUFNLEVBQUU7d0JBQ04sSUFBSSxFQUFFLFdBQVc7cUJBQ2xCO29CQUNELFlBQVksRUFBRTt3QkFDWixlQUFlLEVBQUU7NEJBQ2YsTUFBTSxFQUFFLGFBQWE7NEJBQ3JCLGFBQWEsRUFBRSxjQUFjOzRCQUM3QixVQUFVLEVBQUUsYUFBYTs0QkFDekIsU0FBUyxFQUFFLFVBQVU7eUJBQ3RCO3dCQUNELGVBQWUsRUFBRTs0QkFDZixNQUFNLEVBQUUsYUFBYTs0QkFDckIsYUFBYSxFQUFFLGNBQWM7NEJBQzdCLFVBQVUsRUFBRSxhQUFhOzRCQUN6QixTQUFTLEVBQUUsV0FBVzt5QkFDdkI7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7UUFDRiwyQkFBMkIsRUFBRSxlQUFlO0tBQzdDLENBQUMsQ0FBQztJQUVILEdBQUcsR0FBRyxrQkFBTyxFQUFFLENBQUM7SUFFaEIsK0JBQStCO0lBQy9CLEdBQUcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsMEJBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuRCxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRywyQkFBZ0IsQ0FBQyxVQUFVLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUM1RSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxxQkFBVSxFQUFFLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGVBQWUsRUFBRSxLQUFLLElBQUksRUFBRTtJQUMvQixNQUFNLGdCQUFnQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFNUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxxQkFBZSxDQUFDLG1CQUFhLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ3RHLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXBCLE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekQscUNBQXFDO0lBQ3JDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUMxRCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzVCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxxQkFBZSxDQUFDLG1CQUFhLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ3RHLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXBCLE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekQsMEJBQTBCO0lBQzFCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFlBQVk7SUFHaEIsWUFBNkIsVUFBVSxLQUFLO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUY1QixhQUFRLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztJQUcvQyxDQUFDO0lBRU0sY0FBYyxDQUFDLEtBQWdCLEVBQUUsS0FBdUI7UUFDN0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzc2V0TWFuaWZlc3RTY2hlbWEgfSBmcm9tICdAYXdzLWNkay9jZGstYXNzZXRzLXNjaGVtYSc7XG5pbXBvcnQgKiBhcyBtb2NrZnMgZnJvbSAnbW9jay1mcyc7XG5pbXBvcnQgeyBBc3NldE1hbmlmZXN0LCBBc3NldFB1Ymxpc2hpbmcsIEV2ZW50VHlwZSwgSVB1Ymxpc2hQcm9ncmVzcywgSVB1Ymxpc2hQcm9ncmVzc0xpc3RlbmVyIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IG1vY2tBd3MsIG1vY2tlZEFwaUZhaWx1cmUsIG1vY2tlZEFwaVJlc3VsdCwgbW9ja1VwbG9hZCB9IGZyb20gJy4vbW9jay1hd3MnO1xuXG5sZXQgYXdzOiBSZXR1cm5UeXBlPHR5cGVvZiBtb2NrQXdzPjtcbmJlZm9yZUVhY2goKCkgPT4ge1xuICBtb2NrZnMoe1xuICAgICcvc2ltcGxlL2Nkay5vdXQvYXNzZXRzLmpzb24nOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICB2ZXJzaW9uOiBBc3NldE1hbmlmZXN0U2NoZW1hLmN1cnJlbnRWZXJzaW9uKCksXG4gICAgICBmaWxlczoge1xuICAgICAgICB0aGVBc3NldDoge1xuICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgcGF0aDogJ3NvbWVfZmlsZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlc3RpbmF0aW9uczoge1xuICAgICAgICAgICAgdGhlRGVzdGluYXRpb24xOiB7XG4gICAgICAgICAgICAgIHJlZ2lvbjogJ3VzLW5vcnRoLTUwJyxcbiAgICAgICAgICAgICAgYXNzdW1lUm9sZUFybjogJ2Fybjphd3M6cm9sZScsXG4gICAgICAgICAgICAgIGJ1Y2tldE5hbWU6ICdzb21lX2J1Y2tldCcsXG4gICAgICAgICAgICAgIG9iamVjdEtleTogJ3NvbWVfa2V5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGVEZXN0aW5hdGlvbjI6IHtcbiAgICAgICAgICAgICAgcmVnaW9uOiAndXMtbm9ydGgtNTAnLFxuICAgICAgICAgICAgICBhc3N1bWVSb2xlQXJuOiAnYXJuOmF3czpyb2xlJyxcbiAgICAgICAgICAgICAgYnVja2V0TmFtZTogJ3NvbWVfYnVja2V0JyxcbiAgICAgICAgICAgICAgb2JqZWN0S2V5OiAnc29tZV9rZXkyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgJy9zaW1wbGUvY2RrLm91dC9zb21lX2ZpbGUnOiAnRklMRV9DT05URU5UUycsXG4gIH0pO1xuXG4gIGF3cyA9IG1vY2tBd3MoKTtcblxuICAvLyBBY2NlcHQgYWxsIFMzIHVwbG9hZHMgYXMgbmV3XG4gIGF3cy5tb2NrUzMuZ2V0QnVja2V0TG9jYXRpb24gPSBtb2NrZWRBcGlSZXN1bHQoe30pO1xuICBhd3MubW9ja1MzLmhlYWRPYmplY3QgPSBtb2NrZWRBcGlGYWlsdXJlKCdOb3RGb3VuZCcsICdGaWxlIGRvZXMgbm90IGV4aXN0Jyk7XG4gIGF3cy5tb2NrUzMudXBsb2FkID0gbW9ja1VwbG9hZCgpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIG1vY2tmcy5yZXN0b3JlKCk7XG59KTtcblxudGVzdCgndGVzdCBsaXN0ZW5lcicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3NMaXN0ZW5lciA9IG5ldyBGYWtlTGlzdGVuZXIoKTtcblxuICBjb25zdCBwdWIgPSBuZXcgQXNzZXRQdWJsaXNoaW5nKEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpLCB7IGF3cywgcHJvZ3Jlc3NMaXN0ZW5lciB9KTtcbiAgYXdhaXQgcHViLnB1Ymxpc2goKTtcblxuICBjb25zdCBhbGxNZXNzYWdlcyA9IHByb2dyZXNzTGlzdGVuZXIubWVzc2FnZXMuam9pbignXFxuJyk7XG5cbiAgLy8gTG9nIG1lbnRpb25zIGFzc2V0L2Rlc3RpbmF0aW9uIGlkc1xuICBleHBlY3QoYWxsTWVzc2FnZXMpLnRvQ29udGFpbigndGhlQXNzZXQ6dGhlRGVzdGluYXRpb24xJyk7XG4gIGV4cGVjdChhbGxNZXNzYWdlcykudG9Db250YWluKCd0aGVBc3NldDp0aGVEZXN0aW5hdGlvbjInKTtcbn0pO1xuXG50ZXN0KCd0ZXN0IGFib3J0JywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwcm9ncmVzc0xpc3RlbmVyID0gbmV3IEZha2VMaXN0ZW5lcih0cnVlKTtcblxuICBjb25zdCBwdWIgPSBuZXcgQXNzZXRQdWJsaXNoaW5nKEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpLCB7IGF3cywgcHJvZ3Jlc3NMaXN0ZW5lciB9KTtcbiAgYXdhaXQgcHViLnB1Ymxpc2goKTtcblxuICBjb25zdCBhbGxNZXNzYWdlcyA9IHByb2dyZXNzTGlzdGVuZXIubWVzc2FnZXMuam9pbignXFxuJyk7XG5cbiAgLy8gV2UgbmV2ZXIgZ2V0IHRvIGFzc2V0IDJcbiAgZXhwZWN0KGFsbE1lc3NhZ2VzKS5ub3QudG9Db250YWluKCd0aGVBc3NldDp0aGVEZXN0aW5hdGlvbjInKTtcbn0pO1xuXG5jbGFzcyBGYWtlTGlzdGVuZXIgaW1wbGVtZW50cyBJUHVibGlzaFByb2dyZXNzTGlzdGVuZXIge1xuICBwdWJsaWMgcmVhZG9ubHkgbWVzc2FnZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZG9BYm9ydCA9IGZhbHNlKSB7XG4gIH1cblxuICBwdWJsaWMgb25QdWJsaXNoRXZlbnQoX3R5cGU6IEV2ZW50VHlwZSwgZXZlbnQ6IElQdWJsaXNoUHJvZ3Jlc3MpOiB2b2lkIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2goZXZlbnQubWVzc2FnZSk7XG5cbiAgICBpZiAodGhpcy5kb0Fib3J0KSB7XG4gICAgICBldmVudC5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuIl19