"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const mockfs = require("mock-fs");
const lib_1 = require("../lib");
const mock_aws_1 = require("./mock-aws");
let aws;
beforeEach(() => {
    mockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                fileAsset: {
                    type: 'file',
                    source: {
                        path: 'some_file'
                    },
                    destinations: {
                        theDestination: {
                            // Absence of region
                            assumeRoleArn: 'arn:aws:role-${AWS::AccountId}',
                            bucketName: 'some_bucket-${AWS::AccountId}-${AWS::Region}',
                            objectKey: 'some_key-${AWS::AccountId}-${AWS::Region}',
                        },
                    },
                },
            },
            dockerImages: {
                dockerAsset: {
                    type: 'docker-image',
                    source: {
                        directory: 'dockerdir'
                    },
                    destinations: {
                        theDestination: {
                            // Explicit region
                            region: 'explicit_region',
                            assumeRoleArn: 'arn:aws:role-${AWS::AccountId}',
                            repositoryName: 'repo-${AWS::AccountId}-${AWS::Region}',
                            imageTag: 'abcdef',
                        },
                    },
                },
            },
        }),
        '/simple/cdk.out/some_file': 'FILE_CONTENTS',
    });
    aws = mock_aws_1.mockAws();
});
afterEach(() => {
    mockfs.restore();
});
test('check that placeholders are replaced', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws });
    aws.mockS3.getBucketLocation = mock_aws_1.mockedApiResult({});
    aws.mockS3.headObject = mock_aws_1.mockedApiResult({ /* No error == file exists */});
    aws.mockEcr.describeImages = mock_aws_1.mockedApiResult({ /* No error == image exists */});
    await pub.publish();
    expect(aws.s3Client).toHaveBeenCalledWith(expect.objectContaining({
        assumeRoleArn: 'arn:aws:role-current_account',
    }));
    expect(aws.ecrClient).toHaveBeenCalledWith(expect.objectContaining({
        region: 'explicit_region',
        assumeRoleArn: 'arn:aws:role-current_account',
    }));
    expect(aws.mockS3.headObject).toHaveBeenCalledWith(expect.objectContaining({
        Bucket: 'some_bucket-current_account-current_region',
        Key: 'some_key-current_account-current_region'
    }));
    expect(aws.mockEcr.describeImages).toHaveBeenCalledWith(expect.objectContaining({
        imageIds: [{ imageTag: 'abcdef' }],
        repositoryName: 'repo-current_account-explicit_region'
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXJzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwbGFjZWhvbGRlcnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtFQUFpRTtBQUNqRSxrQ0FBa0M7QUFDbEMsZ0NBQXdEO0FBQ3hELHlDQUFzRDtBQUV0RCxJQUFJLEdBQStCLENBQUM7QUFDcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLE1BQU0sQ0FBQztRQUNMLDZCQUE2QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDNUMsT0FBTyxFQUFFLHVDQUFtQixDQUFDLGNBQWMsRUFBRTtZQUM3QyxLQUFLLEVBQUU7Z0JBQ0wsU0FBUyxFQUFFO29CQUNULElBQUksRUFBRSxNQUFNO29CQUNaLE1BQU0sRUFBRTt3QkFDTixJQUFJLEVBQUUsV0FBVztxQkFDbEI7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLGNBQWMsRUFBRTs0QkFDZCxvQkFBb0I7NEJBQ3BCLGFBQWEsRUFBRSxnQ0FBZ0M7NEJBQy9DLFVBQVUsRUFBRSw4Q0FBOEM7NEJBQzFELFNBQVMsRUFBRSwyQ0FBMkM7eUJBQ3ZEO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osV0FBVyxFQUFFO29CQUNYLElBQUksRUFBRSxjQUFjO29CQUNwQixNQUFNLEVBQUU7d0JBQ04sU0FBUyxFQUFFLFdBQVc7cUJBQ3ZCO29CQUNELFlBQVksRUFBRTt3QkFDWixjQUFjLEVBQUU7NEJBQ2Qsa0JBQWtCOzRCQUNsQixNQUFNLEVBQUUsaUJBQWlCOzRCQUN6QixhQUFhLEVBQUUsZ0NBQWdDOzRCQUMvQyxjQUFjLEVBQUUsdUNBQXVDOzRCQUN2RCxRQUFRLEVBQUUsUUFBUTt5QkFDbkI7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7UUFDRiwyQkFBMkIsRUFBRSxlQUFlO0tBQzdDLENBQUMsQ0FBQztJQUVILEdBQUcsR0FBRyxrQkFBTyxFQUFFLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3RELE1BQU0sR0FBRyxHQUFHLElBQUkscUJBQWUsQ0FBQyxtQkFBYSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNwRixHQUFHLENBQUMsTUFBTSxDQUFDLGlCQUFpQixHQUFHLDBCQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsMEJBQWUsQ0FBQyxFQUFFLDZCQUE2QixDQUFFLENBQUMsQ0FBQztJQUMzRSxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRywwQkFBZSxDQUFDLEVBQUUsOEJBQThCLENBQUUsQ0FBQyxDQUFDO0lBRWpGLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXBCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQ2hFLGFBQWEsRUFBRSw4QkFBOEI7S0FDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSixNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNqRSxNQUFNLEVBQUUsaUJBQWlCO1FBQ3pCLGFBQWEsRUFBRSw4QkFBOEI7S0FDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFDekUsTUFBTSxFQUFFLDRDQUE0QztRQUNwRCxHQUFHLEVBQUUseUNBQXlDO0tBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUosTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQzlFLFFBQVEsRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBQyxDQUFDO1FBQ2hDLGNBQWMsRUFBRSxzQ0FBc0M7S0FDdkQsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzc2V0TWFuaWZlc3RTY2hlbWEgfSBmcm9tICdAYXdzLWNkay9jZGstYXNzZXRzLXNjaGVtYSc7XG5pbXBvcnQgKiBhcyBtb2NrZnMgZnJvbSAnbW9jay1mcyc7XG5pbXBvcnQgeyBBc3NldE1hbmlmZXN0LCBBc3NldFB1Ymxpc2hpbmcgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgbW9ja0F3cywgbW9ja2VkQXBpUmVzdWx0IH0gZnJvbSAnLi9tb2NrLWF3cyc7XG5cbmxldCBhd3M6IFJldHVyblR5cGU8dHlwZW9mIG1vY2tBd3M+O1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIG1vY2tmcyh7XG4gICAgJy9zaW1wbGUvY2RrLm91dC9hc3NldHMuanNvbic6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHZlcnNpb246IEFzc2V0TWFuaWZlc3RTY2hlbWEuY3VycmVudFZlcnNpb24oKSxcbiAgICAgIGZpbGVzOiB7XG4gICAgICAgIGZpbGVBc3NldDoge1xuICAgICAgICAgIHR5cGU6ICdmaWxlJyxcbiAgICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICAgIHBhdGg6ICdzb21lX2ZpbGUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZXN0aW5hdGlvbnM6IHtcbiAgICAgICAgICAgIHRoZURlc3RpbmF0aW9uOiB7XG4gICAgICAgICAgICAgIC8vIEFic2VuY2Ugb2YgcmVnaW9uXG4gICAgICAgICAgICAgIGFzc3VtZVJvbGVBcm46ICdhcm46YXdzOnJvbGUtJHtBV1M6OkFjY291bnRJZH0nLFxuICAgICAgICAgICAgICBidWNrZXROYW1lOiAnc29tZV9idWNrZXQtJHtBV1M6OkFjY291bnRJZH0tJHtBV1M6OlJlZ2lvbn0nLFxuICAgICAgICAgICAgICBvYmplY3RLZXk6ICdzb21lX2tleS0ke0FXUzo6QWNjb3VudElkfS0ke0FXUzo6UmVnaW9ufScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgZG9ja2VySW1hZ2VzOiB7XG4gICAgICAgIGRvY2tlckFzc2V0OiB7XG4gICAgICAgICAgdHlwZTogJ2RvY2tlci1pbWFnZScsXG4gICAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBkaXJlY3Rvcnk6ICdkb2NrZXJkaXInXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZXN0aW5hdGlvbnM6IHtcbiAgICAgICAgICAgIHRoZURlc3RpbmF0aW9uOiB7XG4gICAgICAgICAgICAgIC8vIEV4cGxpY2l0IHJlZ2lvblxuICAgICAgICAgICAgICByZWdpb246ICdleHBsaWNpdF9yZWdpb24nLFxuICAgICAgICAgICAgICBhc3N1bWVSb2xlQXJuOiAnYXJuOmF3czpyb2xlLSR7QVdTOjpBY2NvdW50SWR9JyxcbiAgICAgICAgICAgICAgcmVwb3NpdG9yeU5hbWU6ICdyZXBvLSR7QVdTOjpBY2NvdW50SWR9LSR7QVdTOjpSZWdpb259JyxcbiAgICAgICAgICAgICAgaW1hZ2VUYWc6ICdhYmNkZWYnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICAnL3NpbXBsZS9jZGsub3V0L3NvbWVfZmlsZSc6ICdGSUxFX0NPTlRFTlRTJyxcbiAgfSk7XG5cbiAgYXdzID0gbW9ja0F3cygpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIG1vY2tmcy5yZXN0b3JlKCk7XG59KTtcblxudGVzdCgnY2hlY2sgdGhhdCBwbGFjZWhvbGRlcnMgYXJlIHJlcGxhY2VkJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwdWIgPSBuZXcgQXNzZXRQdWJsaXNoaW5nKEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpLCB7IGF3cyB9KTtcbiAgYXdzLm1vY2tTMy5nZXRCdWNrZXRMb2NhdGlvbiA9IG1vY2tlZEFwaVJlc3VsdCh7fSk7XG4gIGF3cy5tb2NrUzMuaGVhZE9iamVjdCA9IG1vY2tlZEFwaVJlc3VsdCh7IC8qIE5vIGVycm9yID09IGZpbGUgZXhpc3RzICovIH0pO1xuICBhd3MubW9ja0Vjci5kZXNjcmliZUltYWdlcyA9IG1vY2tlZEFwaVJlc3VsdCh7IC8qIE5vIGVycm9yID09IGltYWdlIGV4aXN0cyAqLyB9KTtcblxuICBhd2FpdCBwdWIucHVibGlzaCgpO1xuXG4gIGV4cGVjdChhd3MuczNDbGllbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICBhc3N1bWVSb2xlQXJuOiAnYXJuOmF3czpyb2xlLWN1cnJlbnRfYWNjb3VudCcsXG4gIH0pKTtcblxuICBleHBlY3QoYXdzLmVjckNsaWVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIHJlZ2lvbjogJ2V4cGxpY2l0X3JlZ2lvbicsXG4gICAgYXNzdW1lUm9sZUFybjogJ2Fybjphd3M6cm9sZS1jdXJyZW50X2FjY291bnQnLFxuICB9KSk7XG5cbiAgZXhwZWN0KGF3cy5tb2NrUzMuaGVhZE9iamVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIEJ1Y2tldDogJ3NvbWVfYnVja2V0LWN1cnJlbnRfYWNjb3VudC1jdXJyZW50X3JlZ2lvbicsXG4gICAgS2V5OiAnc29tZV9rZXktY3VycmVudF9hY2NvdW50LWN1cnJlbnRfcmVnaW9uJ1xuICB9KSk7XG5cbiAgZXhwZWN0KGF3cy5tb2NrRWNyLmRlc2NyaWJlSW1hZ2VzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgaW1hZ2VJZHM6IFt7aW1hZ2VUYWc6ICdhYmNkZWYnfV0sXG4gICAgcmVwb3NpdG9yeU5hbWU6ICdyZXBvLWN1cnJlbnRfYWNjb3VudC1leHBsaWNpdF9yZWdpb24nXG4gIH0pKTtcbn0pO1xuIl19