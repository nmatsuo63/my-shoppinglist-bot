"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Separate test file since the archiving module doesn't work well with 'mock-fs'
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const lib_1 = require("../lib");
const bockfs = require("./bockfs");
const mock_aws_1 = require("./mock-aws");
let aws;
beforeEach(() => {
    bockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                theAsset: {
                    source: {
                        path: 'some_dir',
                        packaging: 'zip'
                    },
                    destinations: {
                        theDestination: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key',
                        },
                    },
                },
            },
        }),
        '/simple/cdk.out/some_dir/some_file': 'FILE_CONTENTS',
    });
    aws = mock_aws_1.mockAws();
    // Accept all S3 uploads as new
    aws.mockS3.headObject = mock_aws_1.mockedApiFailure('NotFound', 'File does not exist');
    aws.mockS3.upload = mock_aws_1.mockUpload();
});
afterEach(() => {
    bockfs.restore();
});
test('Take a zipped upload', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath(bockfs.path('/simple/cdk.out')), { aws });
    await pub.publish();
    expect(aws.mockS3.upload).toHaveBeenCalledWith(expect.objectContaining({
        Bucket: 'some_bucket',
        Key: 'some_key',
        ContentType: 'application/zip',
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemlwcGluZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiemlwcGluZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUZBQWlGO0FBQ2pGLGtFQUFpRTtBQUNqRSxnQ0FBd0Q7QUFDeEQsbUNBQW1DO0FBQ25DLHlDQUFtRTtBQUVuRSxJQUFJLEdBQStCLENBQUM7QUFDcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLE1BQU0sQ0FBQztRQUNMLDZCQUE2QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDNUMsT0FBTyxFQUFFLHVDQUFtQixDQUFDLGNBQWMsRUFBRTtZQUM3QyxLQUFLLEVBQUU7Z0JBQ0wsUUFBUSxFQUFFO29CQUNSLE1BQU0sRUFBRTt3QkFDTixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsU0FBUyxFQUFFLEtBQUs7cUJBQ2pCO29CQUNELFlBQVksRUFBRTt3QkFDWixjQUFjLEVBQUU7NEJBQ2QsTUFBTSxFQUFFLGFBQWE7NEJBQ3JCLGFBQWEsRUFBRSxjQUFjOzRCQUM3QixVQUFVLEVBQUUsYUFBYTs0QkFDekIsU0FBUyxFQUFFLFVBQVU7eUJBQ3RCO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDO1FBQ0Ysb0NBQW9DLEVBQUUsZUFBZTtLQUN0RCxDQUFDLENBQUM7SUFFSCxHQUFHLEdBQUcsa0JBQU8sRUFBRSxDQUFDO0lBRWhCLCtCQUErQjtJQUMvQixHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRywyQkFBZ0IsQ0FBQyxVQUFVLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUM1RSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxxQkFBVSxFQUFFLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUkscUJBQWUsQ0FBQyxtQkFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFakcsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFcEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQ3JFLE1BQU0sRUFBRSxhQUFhO1FBQ3JCLEdBQUcsRUFBRSxVQUFVO1FBQ2YsV0FBVyxFQUFFLGlCQUFpQjtLQUMvQixDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU2VwYXJhdGUgdGVzdCBmaWxlIHNpbmNlIHRoZSBhcmNoaXZpbmcgbW9kdWxlIGRvZXNuJ3Qgd29yayB3ZWxsIHdpdGggJ21vY2stZnMnXG5pbXBvcnQgeyBBc3NldE1hbmlmZXN0U2NoZW1hIH0gZnJvbSAnQGF3cy1jZGsvY2RrLWFzc2V0cy1zY2hlbWEnO1xuaW1wb3J0IHsgQXNzZXRNYW5pZmVzdCwgQXNzZXRQdWJsaXNoaW5nIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCAqIGFzIGJvY2tmcyBmcm9tICcuL2JvY2tmcyc7XG5pbXBvcnQgeyBtb2NrQXdzLCBtb2NrZWRBcGlGYWlsdXJlLCBtb2NrVXBsb2FkIH0gZnJvbSAnLi9tb2NrLWF3cyc7XG5cbmxldCBhd3M6IFJldHVyblR5cGU8dHlwZW9mIG1vY2tBd3M+O1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGJvY2tmcyh7XG4gICAgJy9zaW1wbGUvY2RrLm91dC9hc3NldHMuanNvbic6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHZlcnNpb246IEFzc2V0TWFuaWZlc3RTY2hlbWEuY3VycmVudFZlcnNpb24oKSxcbiAgICAgIGZpbGVzOiB7XG4gICAgICAgIHRoZUFzc2V0OiB7XG4gICAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBwYXRoOiAnc29tZV9kaXInLFxuICAgICAgICAgICAgcGFja2FnaW5nOiAnemlwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVzdGluYXRpb25zOiB7XG4gICAgICAgICAgICB0aGVEZXN0aW5hdGlvbjoge1xuICAgICAgICAgICAgICByZWdpb246ICd1cy1ub3J0aC01MCcsXG4gICAgICAgICAgICAgIGFzc3VtZVJvbGVBcm46ICdhcm46YXdzOnJvbGUnLFxuICAgICAgICAgICAgICBidWNrZXROYW1lOiAnc29tZV9idWNrZXQnLFxuICAgICAgICAgICAgICBvYmplY3RLZXk6ICdzb21lX2tleScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICAgICcvc2ltcGxlL2Nkay5vdXQvc29tZV9kaXIvc29tZV9maWxlJzogJ0ZJTEVfQ09OVEVOVFMnLFxuICB9KTtcblxuICBhd3MgPSBtb2NrQXdzKCk7XG5cbiAgLy8gQWNjZXB0IGFsbCBTMyB1cGxvYWRzIGFzIG5ld1xuICBhd3MubW9ja1MzLmhlYWRPYmplY3QgPSBtb2NrZWRBcGlGYWlsdXJlKCdOb3RGb3VuZCcsICdGaWxlIGRvZXMgbm90IGV4aXN0Jyk7XG4gIGF3cy5tb2NrUzMudXBsb2FkID0gbW9ja1VwbG9hZCgpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGJvY2tmcy5yZXN0b3JlKCk7XG59KTtcblxudGVzdCgnVGFrZSBhIHppcHBlZCB1cGxvYWQnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHB1YiA9IG5ldyBBc3NldFB1Ymxpc2hpbmcoQXNzZXRNYW5pZmVzdC5mcm9tUGF0aChib2NrZnMucGF0aCgnL3NpbXBsZS9jZGsub3V0JykpLCB7IGF3cyB9KTtcblxuICBhd2FpdCBwdWIucHVibGlzaCgpO1xuXG4gIGV4cGVjdChhd3MubW9ja1MzLnVwbG9hZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgIEJ1Y2tldDogJ3NvbWVfYnVja2V0JyxcbiAgICBLZXk6ICdzb21lX2tleScsXG4gICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi96aXAnLFxuICB9KSk7XG59KTtcbiJdfQ==