"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const mockfs = require("mock-fs");
const lib_1 = require("../lib");
const mock_aws_1 = require("./mock-aws");
let aws;
beforeEach(() => {
    mockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                theAsset: {
                    source: {
                        path: 'some_file'
                    },
                    destinations: {
                        theDestination: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key',
                        },
                    },
                },
            },
        }),
        '/simple/cdk.out/some_file': 'FILE_CONTENTS',
        '/abs/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                theAsset: {
                    source: {
                        path: '/simple/cdk.out/some_file'
                    },
                    destinations: {
                        theDestination: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key',
                        },
                    },
                },
            },
        }),
    });
    aws = mock_aws_1.mockAws();
});
afterEach(() => {
    mockfs.restore();
});
test('pass destination properties to AWS client', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws, throwOnError: false });
    await pub.publish();
    expect(aws.s3Client).toHaveBeenCalledWith(expect.objectContaining({
        region: 'us-north-50',
        assumeRoleArn: 'arn:aws:role',
    }));
});
test('Do nothing if file already exists', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws, });
    aws.mockS3.headObject = mock_aws_1.mockedApiResult({ /* No error == file exists */});
    await pub.publish();
    expect(aws.mockS3.headObject).toHaveBeenCalledWith(expect.objectContaining({
        Bucket: 'some_bucket',
        Key: 'some_key'
    }));
});
test('upload file if new', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws });
    aws.mockS3.headObject = mock_aws_1.mockedApiFailure('NotFound', 'File does not exist');
    aws.mockS3.upload = mock_aws_1.mockUpload('FILE_CONTENTS');
    await pub.publish();
    expect(aws.mockS3.upload).toHaveBeenCalledWith(expect.objectContaining({
        Bucket: 'some_bucket',
        Key: 'some_key'
    }));
    // We'll just have to assume the contents are correct
});
test('successful run does not need to query account ID', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws });
    aws.mockS3.headObject = mock_aws_1.mockedApiFailure('NotFound', 'File does not exist');
    aws.mockS3.upload = mock_aws_1.mockUpload('FILE_CONTENTS');
    await pub.publish();
    expect(aws.discoverCurrentAccount).not.toHaveBeenCalled();
});
test('correctly identify asset path if path is absolute', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/abs/cdk.out'), { aws });
    aws.mockS3.headObject = mock_aws_1.mockedApiFailure('NotFound', 'File does not exist');
    aws.mockS3.upload = mock_aws_1.mockUpload('FILE_CONTENTS');
    await pub.publish();
});
//# sourceMappingURL=data:application/json;base64,